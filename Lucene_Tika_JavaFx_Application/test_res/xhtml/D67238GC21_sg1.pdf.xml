<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="date" content="2015-03-04T06:37:56Z" />
<meta name="pdf:PDFVersion" content="1.6" />
<meta name="access_permission:modify_annotations" content="false" />
<meta name="access_permission:can_print_degraded" content="true" />
<meta name="dcterms:created" content="2014-12-29T06:17:23Z" />
<meta name="Last-Modified" content="2015-03-04T06:37:56Z" />
<meta name="dcterms:modified" content="2015-03-04T06:37:56Z" />
<meta name="dc:format" content="application/pdf; version=1.6" />
<meta name="xmpMM:DocumentID" content="uuid:36d7c9b4-23fe-40dd-82ea-329d21daab2b" />
<meta name="Last-Save-Date" content="2015-03-04T06:37:56Z" />
<meta name="access_permission:fill_in_form" content="false" />
<meta name="meta:save-date" content="2015-03-04T06:37:56Z" />
<meta name="pdf:encrypted" content="true" />
<meta name="modified" content="2015-03-04T06:37:56Z" />
<meta name="Content-Type" content="application/pdf" />
<meta name="X-Parsed-By" content="org.apache.tika.parser.DefaultParser" />
<meta name="X-Parsed-By" content="org.apache.tika.parser.pdf.PDFParser" />
<meta name="meta:creation-date" content="2014-12-29T06:17:23Z" />
<meta name="created" content="Mon Dec 29 13:17:23 KRAT 2014" />
<meta name="access_permission:extract_for_accessibility" content="true" />
<meta name="access_permission:assemble_document" content="false" />
<meta name="xmpTPg:NPages" content="282" />
<meta name="Creation-Date" content="2014-12-29T06:17:23Z" />
<meta name="access_permission:extract_content" content="false" />
<meta name="access_permission:can_print" content="true" />
<meta name="producer" content="iText 5.0.6 (c) 1T3XT BVBA" />
<meta name="access_permission:can_modify" content="false" />
<title></title>
</head>
<body><div class="page"><p />
<p>Learn more from Oracle University at  oracle.com/education/ 
</p>
<p>Java SE 7 Programming 
 
 
</p>
<p>Student Guide – Volume I 
D67238GC21 
Edit ion 2.1 |  December 2014 |  D89706 
 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates.  All rights reserved. 
</p>
<p>Disclaimer 
 
This document contains proprietary information and is protected by copyright and other intellectual property laws. You 
may copy and print this document solely for your own use in an Oracle training course. The document may not be 
modified or altered in any way. Except where your use constitutes "fair use" under copyright law, you may not use, share, 
download, upload, copy, print, display, perform, reproduce, publish, license, post, transmit, or distribute this document in 
whole or in part without the express authorization of Oracle. 
 
The information contained in this document is subject to change without notice. If you find any problems in the document, 
please report them in writing to: Oracle University, 500 Oracle Parkway, Redwood Shores, California 94065 USA. This 
document is not warranted to be error-free. 
 
Restricted Rights Notice 
 
</p>
<p>If this documentation is delivered to the United States Government or anyone using the documentation on behalf of the 
United States Government, the following notice is applicable:  
 
U.S. GOVERNMENT RIGHTS 
The U.S. Government’s rights to use, modify, reproduce, release, perform, display, or disclose these training materials are 
restricted by the terms of the applicable Oracle license agreement and/or the applicable U.S. Government contract.  
 
</p>
<p>Trademark Notice 
 
</p>
<p>Oracle and Java are registered trademarks of Oracle and/or its affiliates. Other names may be trademarks of their 
respective owners. 
 
 
 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> iii 
</p>
<p>Contents 
 
 
 
 
1 Introduction 
</p>
<p>Course Goals   1-2 
Course Objectives   1-3 
Audience   1-5 
Prerequisites   1-6 
Class Introductions   1-7 
Course Environment   1-8 
Java Programs Are Platform-Independent   1-9 
Java Technology Product Groups   1-10 
Java SE Platform Versions   1-11 
Downloading and Installing the JDK   1-12 
Java in Server Environments   1-13 
The Java Community   1-14 
The Java Community Process (JCP)   1-15 
OpenJDK   1-16 
Oracle Java SE Support   1-17 
Additional Resources   1-18 
Summary   1-19 
</p>
<p> 
2 Java Syntax and Class Review 
</p>
<p>Objectives   2-2 
Java Language Review   2-3 
Class Structure   2-4 
A Simple Class   2-5 
Code Blocks   2-6 
Primitive Data Types   2-7 
Java SE 7 Numeric Literals   2-9 
Java SE 7 Binary Literals   2-10 
Operators   2-11 
Strings   2-12 
String Operations   2-13 
if else   2-14 
Logical Operators   2-15 
Arrays and for-each Loop   2-16 
for Loop   2-17 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> iv 
</p>
<p>while Loop   2-18 
String switch Statement   2-19 
Java Naming Conventions   2-20 
A Simple Java Class: Employee   2-21 
Methods   2-22 
Creating an Instance of an Object   2-23 
Constructors   2-24 
package Statement   2-25 
import Statements   2-26 
More on import   2-27 
Java Is Pass-By-Value   2-28 
Pass-By-Value for Object References   2-29 
Objects Passed as Parameters   2-30 
How to Compile and Run   2-31 
Compiling and Running: Example   2-32 
Java Class Loader   2-33 
Garbage Collection   2-34 
Summary   2-35 
Quiz   2-36 
Practice 2-1 Overview: Creating Java Classes   2-38 
</p>
<p> 
3 Encapsulation and Subclassing 
</p>
<p>Objectives   3-2 
Encapsulation   3-3 
Encapsulation: Example   3-4 
Encapsulation: Private Data, Public Methods   3-5 
Public and Private Access Modifiers   3-6 
Revisiting Employee   3-7 
Method Naming: Best Practices   3-8 
Employee Class Refined   3-9 
Make Classes as Immutable as Possible   3-10 
Creating Subclasses   3-11 
Subclassing   3-12 
Manager Subclass   3-13 
Constructors Are Not Inherited   3-14 
Using super in Constructors   3-15 
Constructing a Manager Object   3-16 
What Is Polymorphism?   3-17 
Overloading Methods   3-18 
Methods Using Variable Arguments   3-19 
Single Inheritance   3-21 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> v 
</p>
<p>Summary   3-22 
Quiz   3-23 
Practice 3-1 Overview: Creating Subclasses   3-27 
(Optional) Practice 3-2 Overview: Adding a Staff to a Manager   3-28 
</p>
<p> 
4 Java Class Design 
</p>
<p>Objectives   4-2 
Using Access Control   4-3 
Protected Access Control: Example   4-4 
Field Shadowing: Example   4-5 
Access Control: Good Practice   4-6 
Overriding Methods   4-7 
Invoking an Overridden Method   4-9 
Virtual Method Invocation   4-10 
Accessibility of Overridden Methods   4-11 
Applying Polymorphism   4-12 
Using the instanceof Keyword   4-15 
Casting Object References   4-16 
Casting Rules   4-17 
Overriding Object methods   4-19 
Object toString Method   4-20 
Object equals Method   4-21 
Overriding equals in Employee   4-22 
Overriding Object hashCode   4-23 
Summary   4-24 
Quiz   4-25 
Practice 4-1 Overview: Overriding Methods and Applying Polymorphism   4-29 
</p>
<p> 
5 Advanced Class Design 
</p>
<p>Objectives   5-2 
Modeling Business Problems with Classes   5-3 
Enabling Generalization   5-4 
Identifying the Need for Abstract Classes   5-5 
Defining Abstract Classes   5-6 
Defining Abstract Methods   5-7 
Validating Abstract Classes   5-8 
Quiz   5-9 
static Keyword   5-10 
Static Methods   5-11 
Implementing Static Methods   5-12 
Calling Static Methods   5-13 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> vi 
</p>
<p>Static Variables   5-14 
Defining Static Variables   5-15 
Using Static Variables   5-16 
Static Imports   5-17 
Quiz   5-18 
Final Methods   5-19 
Final Classes   5-20 
Final Variables   5-21 
Declaring Final Variables   5-22 
Quiz   5-23 
When to Avoid Constants   5-24 
Typesafe Enumerations   5-25 
Enum Usage   5-26 
Complex Enums   5-27 
Quiz   5-28 
Design Patterns   5-29 
Singleton Pattern   5-30 
Nested Classes   5-31 
Inner Class: Example   5-32 
Anonymous Inner Classes   5-33 
Quiz   5-34 
Summary   5-35 
Practice 5-1 Overview: Applying the Abstract Keyword   5-36 
Practice 5-2 Overview: Applying the Singleton Design Pattern   5-37 
Practice 5-3 Overview: (Optional) Using Java Enumerations   5-38 
(Optional) Practice 5-4 Overview: Recognizing Nested Classes   5-39 
</p>
<p> 
6 Inheritance with Java Interfaces 
</p>
<p>Objectives   6-2 
Implementation Substitution   6-3 
Java Interfaces   6-4 
Developing Java Interfaces   6-5 
Constant Fields   6-6 
Interface References   6-7 
instanceof Operator   6-8 
Marker Interfaces   6-9 
Casting to Interface Types   6-10 
Using Generic Reference Types   6-11 
Implementing and Extending   6-12 
Extending Interfaces   6-13 
Interfaces in Inheritance Hierarchies   6-14 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> vii 
</p>
<p>Quiz   6-15 
Design Patterns and Interfaces   6-16 
DAO Pattern   6-17 
Before the DAO Pattern   6-18 
After the DAO Pattern   6-19 
The Need for the Factory Pattern   6-20 
Using the Factory Pattern   6-21 
The Factory   6-22 
The DAO and Factory Together   6-23 
Quiz   6-24 
Code Reuse   6-25 
Design Difficulties   6-26 
Composition   6-27 
Composition Implementation   6-28 
Polymorphism and Composition   6-29 
Quiz   6-31 
Summary   6-32 
Practice 6-1 Overview: Implementing an Interface   6-33 
Practice 6-2 Overview: Applying the DAO Pattern   6-34 
(Optional) Practice 6-3 Overview: Implementing Composition   6-35 
</p>
<p> 
7 Generics and Collections 
</p>
<p>Objectives   7-2 
Generics   7-3 
Simple Cache Class Without Generics   7-4 
Generic Cache Class   7-5 
Generics in Action   7-6 
Generics with Type Inference Diamond   7-7 
Quiz   7-8 
Collections   7-9 
Collection Types   7-10 
List Interface   7-11 
ArrayList Implementation Class   7-12 
ArrayList Without Generics   7-13 
Generic ArrayList   7-14 
Generic ArrayList: Iteration and Boxing   7-15 
Autoboxing and Unboxing   7-16 
Quiz   7-17 
Set Interface   7-18 
Set Interface: Example   7-19 
Map Interface   7-20 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> viii 
</p>
<p>Map Types   7-21 
Map Interface: Example   7-22 
Deque Interface   7-23 
Stack with Deque: Example   7-24 
Ordering Collections   7-25 
Comparable Interface   7-26 
Comparable: Example   7-27 
Comparable Test: Example   7-28 
Comparator Interface   7-29 
Comparator: Example   7-30 
Comparator Test: Example   7-31 
Quiz   7-32 
Summary   7-33 
Practice 7-1 Overview: Counting Part Numbers by Using a HashMap   7-34 
Practice 7-2 Overview: Matching Parentheses by Using a Deque   7-35 
Practice 7-3 Overview: Counting Inventory and Sorting with Comparators   7-36 
</p>
<p> 
8 String Processing 
</p>
<p>Objectives   8-2 
Command-Line Arguments    8-3 
Properties   8-5 
Loading and Using a Properties File   8-6 
Loading Properties from the Command Line   8-7 
PrintWriter and the Console   8-8 
printf format   8-9 
Quiz   8-10 
String Processing   8-11 
StringBuilder and StringBuffer   8-12 
StringBuilder: Example   8-13 
Sample String Methods   8-14 
Using the split() Method   8-15 
Parsing with StringTokenizer   8-16 
Scanner   8-17 
Regular Expressions   8-18 
Pattern and Matcher   8-19 
Character Classes   8-20 
Character Class: Examples   8-21 
Character Class Code: Examples   8-22 
Predefined Character Classes   8-23 
Predefined Character Class: Examples   8-24 
Quantifiers   8-25 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> ix 
</p>
<p>Quantifier: Examples   8-26 
Greediness   8-27 
Quiz   8-28 
Boundary Matchers   8-29 
Boundary: Examples   8-30 
Quiz   8-31 
Matching and Groups   8-32 
Using the replaceAll Method   8-33 
Summary   8-34 
Practice 8-1 Overview: Parsing Text with split()   8-35 
Practice 8-2 Overview: Creating a Regular Expression Search Program   8-36 
Practice 8-3 Overview: Transforming HTML by Using Regular Expressions   8-37 
</p>
<p> 
9 Exceptions and Assertions 
</p>
<p>Objectives   9-2 
Error Handling   9-3 
Exception Handling in Java   9-4 
The try-catch Statement   9-5 
Exception Objects   9-6 
Exception Categories   9-7 
Quiz   9-8 
Handling Exceptions   9-10 
The finally Clause   9-11 
The try-with-resources Statement   9-12 
Suppressed Exceptions   9-13 
The AutoCloseable Interface   9-14 
Catching Multiple Exceptions   9-15 
Declaring Exceptions   9-16 
Handling Declared Exceptions   9-17 
Throwing Exceptions   9-18 
Custom Exceptions   9-19 
Quiz   9-20 
Wrapper Exceptions   9-21 
Revisiting the DAO Pattern   9-22 
Assertions   9-23 
Assertion Syntax   9-24 
Internal Invariants   9-25 
Control Flow Invariants   9-26 
Postconditions and Class Invariants   9-27 
Controlling Runtime Evaluation of Assertions   9-28 
Quiz   9-29 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> x 
</p>
<p>Summary   9-30 
Practice 9-1 Overview: Catching Exceptions   9-31 
Practice 9-2 Overview: Extending Exception   9-32 
</p>
<p> 
10 Java I/O Fundamentals 
</p>
<p>Objectives   10-2 
Java I/O Basics   10-3 
I/O Streams   10-4 
I/O Application   10-5 
Data Within Streams    10-6 
Byte Stream InputStream Methods    10-7 
Byte Stream OutputStream Methods    10-9 
Byte Stream Example    10-10 
Character Stream Reader Methods    10-11 
Character Stream Writer Methods    10-12 
Character Stream Example   10-13 
I/O Stream Chaining    10-14 
Chained Streams Example    10-15 
Processing Streams   10-16 
Console I/O    10-17 
java.io.Console   10-18 
Writing to Standard Output    10-19 
Reading from Standard Input    10-20 
Channel I/O   10-21 
Practice 10-1 Overview: Writing a Simple Console I/O Application   10-22 
Persistence   10-23 
Serialization and Object Graphs   10-24 
Transient Fields and Objects    10-25 
Transient: Example   10-26 
Serial Version UID   10-27 
Serialization Example   10-28 
Writing and Reading an Object Stream   10-29 
Serialization Methods   10-30 
readObject Example   10-31 
Summary   10-32 
Quiz   10-33 
Practice 10-2 Overview: Serializing and Deserializing a ShoppingCart   10-37 
</p>
<p> 
11 Java File I/O (NIO.2) 
</p>
<p>Objectives   11-2 
New File I/O API (NIO.2)   11-3 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> xi 
</p>
<p>Limitations of java.io.File   11-4 
File Systems, Paths, and Files   11-5 
Relative Path Versus Absolute Path   11-6 
Symbolic Links   11-7 
Java NIO.2 Concepts   11-8 
Path Interface   11-9 
Path Interface Features   11-10 
Path: Example   11-11 
Removing Redundancies from a Path   11-12 
Creating a Subpath   11-13 
Joining Two Paths   11-14 
Creating a Path Between Two Paths   11-15 
Working with Links   11-16 
Quiz   11-17 
File Operations   11-20 
Checking a File or Directory   11-21 
Creating Files and Directories   11-23 
Deleting a File or Directory   11-24 
Copying a File or Directory   11-25 
Copying Between a Stream and Path   11-26 
Moving a File or Directory   11-27 
Listing a Directory’s Contents   11-28 
Reading/Writing All Bytes or Lines from a File   11-29 
Channels and ByteBuffers   11-30 
Random Access Files   11-31 
Buffered I/O Methods for Text Files   11-32 
Byte Streams   11-33 
Managing Metadata   11-34 
File Attributes (DOS)   11-35 
DOS File Attributes: Example   11-36 
POSIX Permissions   11-37 
Quiz   11-38 
Practice 11-1 Overview: Writing a File Merge Application   11-41 
Recursive Operations   11-42 
FileVisitor Method Order   11-43 
Example: walkFileTree   11-46 
Finding Files   11-47 
PathMatcher Syntax and Pattern   11-48 
PathMatcher: Example   11-50 
Finder Class   11-51 
Other Useful NIO.2 Classes   11-52 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> xii 
</p>
<p>Moving to NIO.2   11-53 
Summary   11-54 
Quiz   11-55 
Practice 11-2 Overview: Recursive Copy   11-58 
(Optional) Practice 11-3 Overview: Using PathMatcher to Recursively Delete   11-59 
</p>
<p> 
12 Threading 
</p>
<p>Objectives   12-2 
Task Scheduling   12-3 
Why Threading Matters   12-4 
The Thread Class   12-5 
Extending Thread   12-6 
Starting a Thread   12-7 
Implementing Runnable   12-8 
Executing Runnable Instances   12-9 
A Runnable with Shared Data   12-10 
One Runnable: Multiple Threads   12-11 
Quiz   12-12 
Problems with Shared Data   12-13 
Nonshared Data   12-14 
Quiz   12-15 
Atomic Operations   12-16 
Out-of-Order Execution   12-17 
Quiz   12-18 
The volatile Keyword   12-19 
Stopping a Thread   12-20 
The synchronized Keyword   12-22 
synchronized Methods   12-23 
synchronized Blocks   12-24 
Object Monitor Locking   12-25 
Detecting Interruption   12-26 
Interrupting a Thread   12-27 
Thread.sleep()   12-28 
Quiz   12-29 
Additional Thread Methods   12-30 
Methods to Avoid   12-31 
Deadlock   12-32 
Summary   12-33 
Practice 12-1 Overview: Synchronizing Access to Shared Data   12-34 
Practice 12-2 Overview: Implementing a Multithreaded Program   12-35 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> xiii 
</p>
<p> 
13 Concurrency 
</p>
<p>Objectives   13-2 
The java.util.concurrent Package   13-3 
The java.util.concurrent.atomic Package   13-4 
The java.util.concurrent.locks Package   13-5 
java.util.concurrent.locks   13-6 
Thread-Safe Collections   13-7 
Quiz   13-8 
Synchronizers   13-9 
java.util.concurrent.CyclicBarrier   13-10 
High-Level Threading Alternatives   13-11 
java.util.concurrent.ExecutorService   13-12 
java.util.concurrent.Callable   13-13 
java.util.concurrent.Future   13-14 
Shutting Down an ExecutorService   13-15 
Quiz   13-16 
Concurrent I/O   13-17 
A Single-Threaded Network Client   13-18 
A Multithreaded Network Client (Part 1)   13-19 
A Multithreaded Network Client (Part 2)   13-20 
A Multithreaded Network Client (Part 3)   13-21 
A Multithreaded Network Client  (Part 4)   13-22 
A Multithreaded Network Client  (Part 5)   13-23 
Parallelism   13-24 
Without Parallelism   13-25 
Naive Parallelism   13-26 
The Need for the Fork-Join Framework   13-27 
Work-Stealing   13-28 
A Single-Threaded Example   13-29 
java.util.concurrent.ForkJoinTask&lt;V&gt;   13-30 
RecursiveTask Example   13-31 
compute Structure   13-32 
compute Example (Below Threshold)   13-33 
compute Example (Above Threshold)   13-34 
ForkJoinPool Example   13-35 
Fork-Join Framework Recommendations   13-36 
Quiz   13-37 
Summary   13-38 
(Optional) Practice 13-1 Overview: Using the java.util.concurrent Package   13-39 
(Optional) Practice 13-2 Overview: Using the Fork-Join Framework   13-40 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> xiv 
</p>
<p> 
14 Building Database Applications with JDBC 
</p>
<p>Objectives   14-2 
Using the JDBC API   14-3 
Using a Vendor’s Driver Class   14-4 
Key JDBC API Components   14-5 
Using a ResultSet Object   14-6 
Putting It All Together   14-7 
Writing Portable JDBC Code   14-9 
The SQLException Class   14-10 
Closing JDBC Objects   14-11 
The “try-with-resources” Construct   14-12 
try-with-resources: Bad Practice   14-13 
Writing Queries and Getting Results   14-14 
Practice 14-1 Overview: Working with the Derby Database and JDBC   14-15 
ResultSetMetaData   14-16 
Getting a Row Count   14-17 
Controlling the ResultSet Fetch Size   14-18 
Using PreparedStatement   14-19 
Using CallableStatement   14-20 
What Is a Transaction?   14-22 
ACID Properties of a Transaction   14-23 
Transferring Without Transactions   14-24 
Successful Transfer with Transactions   14-26 
Unsuccessful Transfer with Transactions   14-27 
JDBC Transactions   14-28 
RowSet 1.1: RowSetProvider and RowSetFactory   14-29 
Using RowSet 1.1 RowSetFactory   14-30 
Example: Using JdbcRowSet   14-32 
Data Access Objects   14-33 
The Data Access Object Pattern   14-34 
Summary   14-35 
Quiz   14-36 
Practice 14-2 Overview: Using the Data Access Object Pattern   14-40 
</p>
<p> 
15 Localization 
</p>
<p>Objectives   15-2 
Why Localize?   15-3 
A Sample Application   15-4 
Locale   15-5 
Resource Bundle   15-6 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> xv 
</p>
<p>Resource Bundle File   15-7 
Sample Resource Bundle Files   15-8 
Quiz   15-9 
Initializing the Sample Application   15-10 
Sample Application: Main Loop   15-11 
The printMenu Method   15-12 
Changing the Locale   15-13 
Sample Interface with French   15-14 
Format Date and Currency   15-15 
Initializing Date and Currency   15-16 
Displaying a Date   15-17 
Customizing a Date   15-18 
Displaying Currency   15-19 
Quiz   15-20 
Summary   15-21 
Practice 15-1 Overview: Creating a Localized Date Application   15-22 
(Optional) Practice 15-2 Overview: Localizing a JDBC Application   15-23 
</p>
<p> 
A SQL Primer 
</p>
<p>Objectives   A-2 
Using SQL to Query Your Database   A-3 
SQL Statements   A-4 
Basic SELECT Statement   A-5 
Limiting the Rows That Are Selected   A-7 
Using the ORDER BY Clause   A-8 
INSERT Statement Syntax   A-9 
UPDATE Statement Syntax   A-10 
DELETE Statement   A-11 
CREATE TABLE Statement   A-12 
Defining Constraints   A-13 
Including Constraints   A-16 
Data Types   A-18 
Dropping a Table   A-20 
Summary   A-21 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p> 
</p>
<p> 
</p>
<p> 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Introduction
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Course Goals
</p>
<p>• This course covers the core APIs that you use to design 
object-oriented applications with Java. This course also 
covers writing database programs with JDBC.
</p>
<p>• Use this course to further develop your skills with the Java 
language and prepare for the Oracle Certified 
Professional, Java SE 7 Programmer Exam.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Course Objectives
</p>
<p>After completing this course, you should be able to do the 
following:
• Create Java technology applications that leverage the 
</p>
<p>object-oriented features of the Java language, such as 
encapsulation, inheritance, and polymorphism
</p>
<p>• Execute a Java application from the command line
• Create applications that use the Collections framework
• Implement error-handling techniques using exception 
</p>
<p>handling
• Implement input/output (I/O) functionality to read from and 
</p>
<p>write to data and text files
and understand advanced
I/O streams
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Course Objectives
</p>
<p>(continued)
• Manipulate files, directories, and file systems using the 
</p>
<p>JDK7 NIO.2 specification
• Perform multiple operations on database tables, including 
</p>
<p>creating, reading, updating, and deleting, using the JDBC 
API
</p>
<p>• Process strings using a variety of regular expressions
• Create high-performing multi-threaded applications that 
</p>
<p>avoid deadlock
• Localize Java applications
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Audience
</p>
<p>The target audience includes those who have:
• Completed the Java SE 7 Fundamentals course or have 
</p>
<p>experience with the Java language, and can create, 
compile, and execute programs
</p>
<p>• Experience with at least one programming language
• An understanding of object-oriented principles
• Experience with basic database concepts and a basic 
</p>
<p>knowledge of SQL
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Prerequisites
</p>
<p>To  successfully complete this course, you must know how to:
• Compile and run Java applications
• Create Java classes
• Create object instances using the new keyword
• Declare Java primitive and reference variables
• Declare Java methods using return values and parameters
• Use conditional constructs such as if and switch
</p>
<p>statements
• Use looping constructs such as for, while, and do loops
• Declare and instantiate Java arrays
• Use the Java Platform, Standard Edition API Specification 
</p>
<p>(Javadocs)
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Class Introductions
</p>
<p>Briefly introduce yourself:
• Name 
• Title or position 
• Company
• Experience with Java programming and Java applications 
• Reasons for attending
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this course, the following products are preinstalled for the lesson practices:
• JDK 7: The Java SE Development Kit includes the command-line Java compiler 
</p>
<p>(javac) and the Java Runtime Environment (JRE), which supplies the java command 
needed to execute Java applications.
</p>
<p>• Firefox: A web browser is used to view the HTML documentation (Javadoc) for the Java 
SE Platform libraries.
</p>
<p>• NetBeans 7.0.1: The NetBeans IDE is a free and open-source software development 
tool for professionals who create enterprise, web, desktop, and mobile applications. 
NetBeans 7.0.1 fully supports the Java SE 7 Platform. Support is provided by Oracle's 
Development Tools Support offering.
</p>
<p>• Java DB: Java DB is Oracle's supported distribution of the open-source Apache Derby 
100% Java technology database. It is fully transactional, secure, easy-to-use, 
standards-based SQL, JDBC API, and Java EE yet small, only 2.5 MB.
</p>
<p>Java SE 7 Programming   1 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Course Environment
</p>
<p>Additional Tools
• Firefox
• Java DB
</p>
<p>Classroom PC
</p>
<p>Core Apps
• JDK 7
• NetBeans 7.0.1
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Platform-Independent Programs
Java technology applications are written in the Java programming language and compiled to 
Java bytecode. Bytecode is executed on the Java platform. The software that provides you 
with a runnable Java platform is called a Java Runtime Environment (JRE). A compiler, 
included in the Java SE Development Kit (JDK), is used to convert Java source code to Java 
bytecode.
</p>
<p>Java SE 7 Programming   1 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Programs Are Platform-Independent
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Identifying Java Technology Groups
Oracle provides a complete line of Java technology products ranging from kits that create 
Java technology programs to emulation (testing) environments for consumer devices, such as 
cellular phones. As indicated in the graphic, all Java technology products share the 
foundation of the Java language. Java technologies, such as the Java Virtual Machine, are 
included (in different forms) in three different groups of products, each designed to fulfill the 
needs of a particular target market. The figure illustrates the three Java technology product 
groups and their target device types. Among other Java technologies, each edition includes a 
Software Development kit (SDK) that allows programmers to create, compile, and execute 
Java technology programs on a particular platform:
• Java Platform, Standard Edition (Java SE): Develops applets and applications that 
</p>
<p>run within Web browsers and on desktop computers, respectively. For example, you can 
use the Java SE Software Development Kit (SDK) to create a word processing program 
for a personal computer. You can also use the Java SE to create an application that 
runs in a browser.
</p>
<p>Note: Applets and applications differ in several ways. Primarily, applets are launched inside a 
web browser, whereas applications are launched within an operating system. 
</p>
<p>Java SE 7 Programming   1 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Technology Product Groups
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>How to Detect Your Version
If Java SE is installed on your system, you can detect the version number by running 
java -version. Note that the java command is included with the Java Runtime 
Environment (JRE). As a developer, you also need a Java compiler, typically javac. The 
javac command is included in the Java SE Development Kit (JDK). Your operation system’s 
PATH may need to be updated to include the location of javac.
</p>
<p>Java SE 7 Programming   1 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java SE Platform Versions
</p>
<p>Year
Developer 
</p>
<p>Version (JDK)
Platform
</p>
<p>1996 1.0 1
1997 1.1 1
1998 1.2 2
2000 1.3 2
2002 1.4 2
2004 1.5 5
2006 1.6 6
2011 1.7 7
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>1. Go to http://www.oracle.com/technetwork/java/javase/downloads/index.html.
2. Choose the Java Platform, Standard Edition (Java SE) link.
3. Download the version that is appropriate for your operation system.
4. Follow the installation instructions.
5. Set your PATH.
</p>
<p>Java SE 7 Programming   1 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Downloading and Installing the JDK
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Enterprise Environments
In this course, you develop Java SE applications. There are standard patterns you need to 
follow when implementing Java SE applications, such as always creating a main method that 
may be different when implementing enterprise applications. Java SE is only the starting point 
in your path to becoming a Java developer. Depending on the needs of your organization, you 
may be required to develop applications that run inside Java EE application servers or other 
types of Java middleware.
Often, you will also need to manipulate information stored inside relational databases such as 
MySQL or Oracle Database. This course introduces you to the fundamentals of database 
programming.
</p>
<p>Java SE 7 Programming   1 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java in Server Environments
</p>
<p>Java is common in enterprise 
environments:
• Oracle Fusion Middleware
</p>
<p>– Java application servers
— GlassFish
— WebLogic
</p>
<p>• Database servers
– MySQL
– Oracle Database
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>What Is the Java Community? 
At a very high level, Java Community is the term used to refer to the many individuals and 
organizations that develop, innovate, and use Java technology. This community includes 
developers as individuals, organizations, businesses, and open-source projects.
It is very common for you to download and use Java libraries from non-Oracle sources within 
the Java community. For instance, in this course, you use an Apache-developed JDBC library 
to access a relational database.
</p>
<p>Apache Software Foundation
</p>
<p>Java SE 7 Programming   1 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>The Java Community
Mobile &amp; 
Embedded
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>JCP.next
The JCP produces the JSRs that outline the standards of the Java platform. The behavior of 
the JCP itself is also defined and improved through the JSR process. The JCP is evolving and 
its improvements are defined in JSR-348. JSR-348 introduces changes in the areas of 
transparency, participation, agility, and governance.
• Transparency: In the past, some aspects of the development of a JSR may have 
</p>
<p>occurred behind closed doors. Transparent development is now the recommended 
practice.
</p>
<p>• Participation: Individuals and Java User Groups are encouraged to become active in 
the JCP.
</p>
<p>• Agility: Slow-moving JSRs are now actively discouraged.
• Governance: The SE and ME expert groups are merging into a single body.
</p>
<p>Java SE 7 Programming   1 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>The Java Community Process (JCP)
</p>
<p>The JCP is used to develop new Java standards:
• http://jcp.org
• Free download of all Java Specification Requests (JSRs)
• Early access to specifications
• Public review and feedback opportunities
• Open membership
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Why OpenJDK Is Important
Because it is open source, OpenJDK enables users to port Java to operating systems and 
hardware platforms of their choosing. Ports are underway for many platforms (besides those 
already supported) including FreeBSD, OpenBSD, NetBSD, and MacOS X.
</p>
<p>Java SE 7 Programming   1 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>OpenJDK
</p>
<p>OpenJDK is the open-source implementation of Java:
• http://openjdk.java.net/
• GPL licensed open-source project
• JDK reference implementation 
• Where new features are developed
• Open to community contributions
• Basis for Oracle JDK
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Still Free
Java (Oracle JDK) is freely available at no cost. Oracle offers advanced commercial solutions 
at cost. The previously offered “Java for Business” program has been replaced by Oracle 
Java SE Support, which provides access to Oracle Premier Support and the Oracle Java SE 
Advanced and Oracle Java SE Suite binaries. For more information, visit 
http://www.oracle.com/us/technologies/java/java-se-suite-394230.html.
</p>
<p>Java SE 7 Programming   1 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Oracle Java SE Support
</p>
<p>Java is available free of charge. However, Oracle does provide 
pay-for Java solutions:
• The Java SE Support Program provides updates for 
</p>
<p>end-of-life Java versions.
• Oracle Java SE Advanced and Oracle Java SE Suite:
</p>
<p>– JRockit Mission Control
– Memory Leak Detection
– Low Latency GC (Suite)
– JRockit Virtual Edition (Suite)
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The table in the slide lists various web resources that are available for you to learn more 
about Java SE programming.
</p>
<p>Java SE 7 Programming   1 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Additional Resources
</p>
<p>Topic Website
Education and Training http://education.oracle.com
Product Documentation http://www.oracle.com/technology/documentation
Product Downloads http://www.oracle.com/technology/software
Product Articles http://www.oracle.com/technology/pub/articles
Product Support http://www.oracle.com/support
Product Forums http://forums.oracle.com
Product Tutorials http://www.oracle.com/technetwork/tutorials/index.html
Sample Code https://www.samplecode.oracle.com
Oracle Technology Network 
for Java Developers http://www.oracle.com/technetwork/java/index.html
</p>
<p>Oracle Learning Library http://www.oracle.com/goto/oll
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   1 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned about:
• The course objectives
• Software used in this course
• Java platforms (ME, SE, and EE)
• Java SE version numbers
• Obtaining a JDK
• The open nature of Java and its community
• Commercial support options for Java SE
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Syntax and Class Review
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to do the 
following:
• Create simple Java classes
</p>
<p>– Create primitive variables
– Manipulate Strings
– Use if-else and switch branching statements
– Iterate with loops
– Create arrays
</p>
<p>• Use Java fields, constructors, and methods
• Use package and import
</p>
<p>statements
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Language Review
</p>
<p>This lesson is a review of fundamental Java and programming 
concepts. It is assumed that students are familiar with the 
following concepts:
• The basic structure of a Java class
• Program block and comments
• Variables
• Basic if-else and switch branching constructs
• Iteration with for and while loops
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Java class is described in a text file with a .java extension. In the example shown, the 
Java keywords are highlighted in bold.
• The package keyword defines where this class lives relative to other classes, and 
</p>
<p>provides a level of access control. You use access modifiers (such as public and 
private) later in this lesson.
</p>
<p>• The import keyword defines other classes or groups of classes that you are using in 
your class. The import statement helps to narrow what the compiler needs to look for 
when resolving class names used in this class. 
</p>
<p>• The class keyword precedes the name of this class. The name of the class and the file 
name must match when the class is declared public (which is a good practice). 
However, the keyword public in front of the class keyword is a modifier and is not 
required.
</p>
<p>• Variables, or the data associated with programs (such as integers, strings, arrays, and 
references to other objects), are called instance fields (often shortened to fields).
</p>
<p>• Constructors are functions called during the creation (instantiation) of an object (a 
representation in memory of a Java class.)
</p>
<p>• Methods are the functions that can be performed on an object. They are also referred to 
as instance methods.
</p>
<p>Java SE 7 Programming   2 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Class Structure
</p>
<p>package &lt;package_name&gt;;
</p>
<p>import &lt;other_packages&gt;;
</p>
<p>public class ClassName {
</p>
<p>&lt;variables(also known as fields)&gt;;
</p>
<p>&lt;constructor method(s)&gt;;
</p>
<p>&lt;other methods&gt;;  
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>To run a Java program, you must define a main method as shown in the slide. The main 
method is automatically called when the class is called from the command line. 
Command-line arguments are passed to the program through the args[] array.
Note: A method that is modified with the keyword static is invoked without a reference to a 
particular object. The class name is used instead. These methods are referred to as class 
methods. The main method is a special method that is invoked when this class is run using 
the Java runtime.
</p>
<p>Java SE 7 Programming   2 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>A Simple Class
</p>
<p>A simple Java class with a main method:
</p>
<p>public class Simple {
</p>
<p>public static void main(String args[]){
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java fields (variables) and methods have a class scope defined by the opening left curly 
brace and ending at the closing right curly brace.
Class scope allows any method in the class to call or invoke any other method in the class. 
Class scope also allows any method to access any field in the class.
Code blocks are always defined using braces {}. A block is executed by executing each of 
the statements defined within the block in order from first to last (left to right). 
The Java compiler ignores white space that precedes or follows the elements that make up a 
line of code. Line indentation is not required but makes code much more readable. In this 
course, the line indentation is four spaces, which is the default line indentation used by the 
NetBeans IDE.
</p>
<p>Java SE 7 Programming   2 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Code Blocks
</p>
<p>• Every class declaration is enclosed in a code block.
• Method declarations are enclosed in code blocks.
• Java fields and methods have block (or class) scope.
• Code blocks are defined in braces:
{ }
</p>
<p>• Example:
</p>
<p>public class SayHello {
</p>
<p>public static void main(String[] args) {
</p>
<p>System.out.println("Hello world");
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Integer
Java provides four different integer types to accommodate different size numbers. All the 
numeric types are signed, which means that they can hold positive or negative numbers.
The integer types have the following ranges:
• byte range is –128 to +127. Number of bits = 8.
• short range is –32,768 to +32,767. Number of bits = 16.
• int range is –2,147,483,648 to +2,147,483,647. The most common integer type is int. 
</p>
<p>Number of bits = 32.
• long range is –9,223,372,036,854,775,808 to +9,223,372,036,854,775,807. Number of 
</p>
<p>bits = 64.
Floating Point
The floating-point types hold numbers with a fractional part and conform to the IEEE 754 
standard. There are two types of floating points: float and double. 
double is so called because it provides double the precision of float. A float uses 32 bits 
to store data, whereas a double uses 64 bits.
</p>
<p>Java SE 7 Programming   2 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Primitive Data Types
</p>
<p>Append uppercase or lowercase "L" or "F" to the number to specify a 
long or a float number.
</p>
<p>Integer Floating
Point
</p>
<p>Character True
False
</p>
<p>byte
short
</p>
<p>int
long
</p>
<p>float
double
</p>
<p>char boolean
</p>
<p>1, 2, 3, 42
07
0xff
</p>
<p>3.0F
.3337F
</p>
<p>4.022E23
</p>
<p>'a'
'\u0061'
</p>
<p>'\n'
</p>
<p>true
false
</p>
<p>0 0.0 '\u0000' false
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Character
The char type is used for individual characters, as opposed to a string of characters (which is 
implemented as a String object). Java supports Unicode, an international standard for 
representing a character in any written language in the world in a single 16-bit value. The first 
256 characters coincide with the ISO Latin 1 character set, part of which is ASCII.
Boolean
The boolean type can hold either true or false.  
Note: true and false may appear to be keywords, but they are technically boolean literals.
</p>
<p>Default Values
If a value is not specified, a default value is used. The values in red in the slide are the 
defaults used. The default char value is null (represented as '\u0000'), and the default 
value for boolean is false.
Note: Local variables (that is, variables declared within methods) do not have a default value. 
An attempt to use a local variable that has not been assigned a value will cause a compiler 
error. It is a good practice always to supply a default value to any variable.
</p>
<p>Java SE 7 Programming   2 - 8
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Rules for Literals
You can place underscores only between digits; you cannot place underscores in the 
following places:
• At the beginning or end of a number
• Adjacent to a decimal point in a floating point literal
• Prior to an F or L suffix
• In positions where a string of digits is expected
</p>
<p>Note: The Java language is case-sensitive. In Java, the variable creditCardNumber is 
different from CREDITCARDNUMBER. Convention indicates that Java variables and method 
names use “lower camel case”―lowercase for the first letter of the first element of a variable 
name and uppercase for the first letter of subsequent elements.
</p>
<p>Java SE 7 Programming   2 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java SE 7 Numeric Literals
</p>
<p>In Java SE 7 (and later versions), any number of underscore 
characters (_) can appear between digits in a numeric field. 
This can improve the readability of your code.
long creditCardNumber = 1234_5678_9012_3456L;
</p>
<p>long socialSecurityNumber = 999_99_9999L;
</p>
<p>long hexBytes = 0xFF_EC_DE_5E;
</p>
<p>long hexWords = 0xCAFE_BABE;
</p>
<p>long maxLong = 0x7fff_ffff_ffff_ffffL;
</p>
<p>byte nybbles = 0b0010_0101;
</p>
<p>long bytes = 0b11010010_01101001_10010100_10010010;
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Binary literals are Java int values. A cast is required when the integer value of the literal 
exceeds the greatest non-negative value that the type can hold. For example:
byte aByte = 0b0111_1111;  // aByte is 127
</p>
<p>byte aByte = 0b1000_0000;  // compiler error – a cast is required
</p>
<p>// (value is -128)
</p>
<p>Java SE 7 Programming   2 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java SE 7 Binary Literals
</p>
<p>In Java SE 7 (and later versions), binary literals can also be 
expressed using the binary system by adding the prefixes 0b or 
0B to the number:
// An 8-bit 'byte' value:
</p>
<p>byte aByte = 0b0010_0001;
</p>
<p>// A 16-bit 'short' value:
</p>
<p>short aShort = (short)0b1010_0001_0100_0101;
</p>
<p>// Some 32-bit 'int' values:
</p>
<p>int anInt1 = 0b1010_0001_0100_0101_1010_0001_0100_0101;
</p>
<p>int anInt2 = 0b101;
</p>
<p>int anInt3 = 0B101; // The B can be upper or lower case.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Because numbers have been introduced, the slide shows a list of common operators. Most 
are common to any programming language, and a description of each is provided in the slide.
The binary and bitwise operators have been omitted for brevity. For details about those 
operators, refer to the Java Tutorial:
http://download.oracle.com/javase/tutorial/java/nutsandbolts/operators.html
Note: Operators have definitive precedence. For the complete list, see the Java Tutorial link 
mentioned above. Precedence can be overridden by using parentheses.
</p>
<p>Java SE 7 Programming   2 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Operators
</p>
<p>• Simple assignment operator
= Simple assignment operator
</p>
<p>• Arithmetic operators
+ Additive operator (also used for String concatenation) 
– Subtraction operator 
* Multiplication operator
/ Division operator 
% Remainder operator 
</p>
<p>• Unary operators
+ Unary plus operator; indicates positive
– Unary minus operator; negates an expression 
++ Increment operator; increments a value by 1 
-- Decrement operator; decrements a value by 1 
! Logical complement operator; inverts the value of a boolean
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The code in the slide demonstrates how text characters are represented in Java. Single 
characters can be represented with the char type. However, Java also includes a String
type for representing multiple characters. Strings can be defined as shown in the slide and 
combined using the "+" sign as a concatenation operator.
The output from the code in the slide is:
Output: HelloWorld a
</p>
<p>Caution: Strings should always be initialized using the assignment operator "=" and text in 
quotation marks, as shown in the examples. The use of new to initialize a String is strongly 
discouraged. The reason is that "Bad Practice" in line 10 is a String literal of type 
String. Using the new keyword simply creates another instance functionally identical to the 
literal. If this statement appeared inside of a loop that was frequently invoked, there could be 
a lot of needless String instances created.
</p>
<p>Java SE 7 Programming   2 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Strings
</p>
<p>1 public class Strings {
</p>
<p>2
</p>
<p>3 public static void main(String args[]){
</p>
<p>4
</p>
<p>5 char letter = 'a';
</p>
<p>6
</p>
<p>7 String string1 = "Hello";
</p>
<p>8 String string2 = "World";
</p>
<p>9 String string3 = "";
</p>
<p>10 String dontDoThis = new String ("Bad Practice");
</p>
<p>11
</p>
<p>12 string3 = string1 + string2; // Concatenate strings
</p>
<p>13
</p>
<p>14 System.out.println("Output: " + string3 + " " + letter);
</p>
<p>15
</p>
<p>16 }
</p>
<p>17 }
</p>
<p>String literals are also 
String objects.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This slide demonstrates some common string methods, including:
• concat()
• length()
• substring()
• toUpperCase()
</p>
<p>To see what other methods can be used on a String, see the API documentation.
The output from the program is:
string3: HelloWorld
</p>
<p>Length: 5
</p>
<p>Sub: Hello
</p>
<p>Upper: HELLOWORLD
</p>
<p>Note: String is a class, not a primitive type. Instances of the class String represent 
sequences of Unicode characters. String literals are stored as String objects and 
“interned,” meaning that for strings with matching characters, they all point to the same 
String object.
</p>
<p>Java SE 7 Programming   2 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>String Operations
</p>
<p>1 public class StringOperations {
</p>
<p>2 public static void main(String arg[]){      
</p>
<p>3 String string1 = "Hello";
</p>
<p>4 String string2 = "World";
</p>
<p>5 String string3 = "";
</p>
<p>6
</p>
<p>7 string3 = string1.concat(string2);
</p>
<p>8 System.out.println("string3: " + string3);
</p>
<p>9
</p>
<p>10 // Get length
</p>
<p>11 System.out.println("Length: " + string1.length());
</p>
<p>12
</p>
<p>13 // Get SubString
</p>
<p>14 System.out.println("Sub: " + string3.substring(0, 5));
</p>
<p>15
</p>
<p>16 // Uppercase
</p>
<p>17 System.out.println("Upper: " + string3.toUpperCase());
</p>
<p>18 } 
</p>
<p>19 }
</p>
<p>String literals are 
automatically created 
</p>
<p>as String objects if 
necessary.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The example in the slide demonstrates the syntax for an if-else statement in Java.
The output from the code in the slide is as follows:
</p>
<p>False
</p>
<p>Java SE 7 Programming   2 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>if else
</p>
<p>1 public class IfElse {
</p>
<p>2
</p>
<p>3 public static void main(String args[]){
</p>
<p>4 long a = 1;
</p>
<p>5 long b = 2;
</p>
<p>6
</p>
<p>7 if (a == b){
</p>
<p>8 System.out.println("True");
</p>
<p>9 } else {
</p>
<p>10 System.out.println("False");
</p>
<p>11 }
</p>
<p>12
</p>
<p>13 }
</p>
<p>14 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The slide shows a summary of the logic and conditional operators in Java.
</p>
<p>Java SE 7 Programming   2 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Logical Operators
</p>
<p>• Equality and relational operators
== Equal to 
!= Not equal to 
&gt; Greater than 
&gt;= Greater than or equal to 
&lt; Less than 
&lt;= Less than or equal to 
</p>
<p>• Conditional operators
&amp;&amp; Conditional-AND 
|| Conditional-OR 
?: Ternary (shorthand for if-then-else statement) 
</p>
<p>• Type comparison operator
instanceof Compares an object to a specified type
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This class demonstrates how to define arrays in Java. The first example creates a String
array and initializes each element separately. The second int array is defined in a single 
statement. 
Each array is iterated through using the Java for-each construct. The loop defines an 
element which will represent each element of the array and the array to loop through. The 
output of the class is shown here:
Name: Blue Shirt
</p>
<p>Name: Red Shirt
</p>
<p>Name: Black Shirt
</p>
<p>Number: 100
</p>
<p>Number: 200
</p>
<p>Number: 300
</p>
<p>Note: Arrays are also objects by default. All arrays support the methods of the class Object. 
You can always obtain the size of an array by using its length field.
</p>
<p>Java SE 7 Programming   2 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Arrays and for-each Loop
1 public class ArrayOperations {
</p>
<p>2 public static void main(String args[]){
</p>
<p>3
</p>
<p>4 String[] names = new String[3];
</p>
<p>5
</p>
<p>6 names[0] = "Blue Shirt";
</p>
<p>7 names[1] = "Red Shirt";
</p>
<p>8 names[2] = "Black Shirt";
</p>
<p>9
</p>
<p>10 int[] numbers = {100, 200, 300};
</p>
<p>11
</p>
<p>12 for (String name:names){
</p>
<p>13 System.out.println("Name: " + name); 
</p>
<p>14 }
</p>
<p>15
</p>
<p>16 for (int number:numbers){
</p>
<p>17 System.out.println("Number: " + number); 
</p>
<p>18 }           
</p>
<p>19 }
</p>
<p>20 }
</p>
<p>Arrays are objects. 
Array objects have a 
final field length.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The classic for loop is shown in the slide. A counter is initialized and incremented for each 
step of the loop. When the condition statement evaluates to false (when i is no longer less 
than 9), the loop exits. Here is the sample output for this program.
i: 0
</p>
<p>i: 1
</p>
<p>i: 2
</p>
<p>i: 3
</p>
<p>i: 4
</p>
<p>i: 5
</p>
<p>i: 6
</p>
<p>i: 7
</p>
<p>i: 8
</p>
<p>Java SE 7 Programming   2 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>for Loop
</p>
<p>1 public class ForLoop {
</p>
<p>2
</p>
<p>3 public static void main(String args[]){
</p>
<p>4
</p>
<p>5 for (int i = 0; i &lt; 9;  i++ ){
</p>
<p>6 System.out.println("i: " + i);
</p>
<p>7 }
</p>
<p>8
</p>
<p>9 }        
</p>
<p>10 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The while loop performs a test and continues if the expression evaluates to true. The 
while loop, shown here, iterates through an array by using a counter. Here is the output from 
the code in the slide:
Number: 100
</p>
<p>Number: 200
</p>
<p>Number: 300
</p>
<p>Note: There is also a do-while loop, where the test after the expression has run at least 
once:
class DoWhileDemo {
</p>
<p>public static void main(String[] args){
</p>
<p>int count = 1;
</p>
<p>do {
</p>
<p>System.out.println("Count is: " + count);
</p>
<p>count++;
</p>
<p>} while (count &lt;= 11);
</p>
<p>}
</p>
<p>}
</p>
<p>Java SE 7 Programming   2 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>while Loop
</p>
<p>1 public class WhileLoop {
</p>
<p>2
</p>
<p>3 public static void main(String args[]){
</p>
<p>4
</p>
<p>5 int i = 0;
</p>
<p>6 int[] numbers = {100, 200, 300};
</p>
<p>7
</p>
<p>8 while (i &lt; numbers.length ){
</p>
<p>9 System.out.println("Number: " + numbers[i]);
</p>
<p>10 i++;
</p>
<p>11 }   
</p>
<p>12 }
</p>
<p>13 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This example shows a switch statement in Java by using a String. Prior to version 7 of 
Java, only enums and byte, short, char, and int primitive data types could be used in a 
switch statement. You will see enums in the lesson titled “Advanced Class Design.”
</p>
<p>Java SE 7 Programming   2 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>String switch Statement
</p>
<p>1 public class SwitchStringStatement {    
</p>
<p>2 public static void main(String args[]){
</p>
<p>3
</p>
<p>4 String color = "Blue";
</p>
<p>5 String shirt = " Shirt";
</p>
<p>6
</p>
<p>7 switch (color){
</p>
<p>8 case "Blue":
</p>
<p>9 shirt = "Blue" + shirt;
</p>
<p>10 break;
</p>
<p>11 case "Red":
</p>
<p>12 shirt = "Red" + shirt;
</p>
<p>13 break;
</p>
<p>14 default:
</p>
<p>15 shirt = "White" + shirt;
</p>
<p>16 }
</p>
<p>17
</p>
<p>18 System.out.println("Shirt type: " + shirt);
</p>
<p>19 }
</p>
<p>20 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>• Class names should be nouns in mixed case, with the first letter uppercase and the first 
letter of each internal word capitalized. This is approach is termed "upper camel case."
</p>
<p>• Methods should be verbs in mixed case, with the first letter lowercase and the first letter 
of each internal word capitalized. This is termed "lower camel case."
</p>
<p>• Variable names should be short but meaningful. The choice of a variable name should 
be mnemonic: designed to indicate to the casual observer the intent of its use.
</p>
<p>• One-character variable names should be avoided except as temporary "throwaway" 
variables.
</p>
<p>• Constants should be declared using all uppercase letters. Note: The keyword final is 
used to declare a variable whose value may only be assigned once. Once a final
variable has been assigned, it always contains the same value. You will learn more 
about the keyword final in the lesson "Advanced Class Design."
</p>
<p>For the complete Code Conventions for the Java Programming Language document, go to 
http://www.oracle.com/technetwork/java/codeconv-138413.html.
</p>
<p>Java SE 7 Programming   2 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Naming Conventions
</p>
<p>1 public class CreditCard {
</p>
<p>2 public final int VISA = 5001;
</p>
<p>3 public String accountName;
</p>
<p>4 public String cardNumber;
</p>
<p>5 public Date expDate;
</p>
<p>6
</p>
<p>7 public double getCharges(){
</p>
<p>8 // ...
</p>
<p>9 }
</p>
<p>10
</p>
<p>11 public void disputeCharge(String chargeId, float amount){
</p>
<p>12 // ...   
</p>
<p>13 }
</p>
<p>14}
</p>
<p>Class names are nouns in 
upper camel case.
</p>
<p>Constants should be declared in 
all uppercase. letters
</p>
<p>Variable names are short 
but meaningful in lower 
camel case.
</p>
<p>Methods should be verbs, 
in lower camel case.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Java class is often used to store or represent data for the construct that the class 
represents. For example, you could create a model (a programmatic representation) of an 
Employee. An Employee object defined using this model will contain values for empId, 
name, Social Security Number (ssn), and salary.
The constructor method in this class creates an instance of an object called Employee. 
A constructor is used to create an instance of a class. Unlike methods, constructors do not 
declare a return type, and are declared with the same name as their class. Constructors can 
take arguments and you can declare more than one constructor, as you will see in the lesson 
titled “Java Class Design.”
</p>
<p>Java SE 7 Programming   2 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>A Simple Java Class: Employee
</p>
<p>A Java class is often used to represent a concept.
1 package com.example.domain;
</p>
<p>2 public class Employee {
</p>
<p>3 public int empId;
</p>
<p>4 public String name;
</p>
<p>5 public String ssn;
</p>
<p>6 public double salary;
</p>
<p>7
</p>
<p>8 public Employee () {
</p>
<p>9 }
</p>
<p>10
</p>
<p>11 public int getEmpId () {
</p>
<p>12 return empId;
</p>
<p>13 }
</p>
<p>14 }
</p>
<p>a constructor
</p>
<p>fields
</p>
<p>a method
</p>
<p>class declaration
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Adding Instance Methods to the EmployeeClass
A common practice is to create a set of methods that manipulate field data: methods that set 
the value of each field, and methods that get the value of each field. These methods are 
called accessors (getters) and mutators (setters).
The convention is to use set and get plus the name of the field with the first letter of the field 
name capitalized (lower camel case). Most modern integrated development environments 
(IDEs) provide an easy way to automatically generate the accessor (getter) and mutator 
(setter) methods for you.
Notice that the set methods use the keyword this. The this keyword allows the compiler to 
distinguish between the field name of the class (this) and the parameter name being passed 
in as an argument. Without the keyword this, the net effect is you are assigning a value to 
itself. (In fact, NetBeans provides a warning: "Assignment to self.")
In this simple example, you could use the setName method to change the employee name 
and the setSalary method to change the employee salary.
Note: The methods declared on this slide are called instance methods. They are invoked by 
using an instance of this class (described in the next slide.)
</p>
<p>Java SE 7 Programming   2 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Methods
</p>
<p>When a class has data fields, a common practice is to provide 
methods for storing data (setter methods) and retrieving data 
(getter methods) from the fields.
1 package com.example.domain;
</p>
<p>2 public class Employee {
</p>
<p>3 public int empId;
</p>
<p>4 // other fields...
</p>
<p>5 public void setEmpId(int empId) {
</p>
<p>6 this.empId = empId;
</p>
<p>7 }
</p>
<p>8 public int getEmpId() {
</p>
<p>9 return empId;
</p>
<p>10 }
</p>
<p>11 // getter/setter methods for other fields...
</p>
<p>12 }
</p>
<p>Often a pair of methods 
to set and get the 
current field value.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Creating an instance of the Employee Class
In order to use the Employee class to hold the information of an employee, you need to 
allocate memory for the Employee object and call a constructor method in the class. An 
instance of an object is created when you use the new keyword with a constructor. All of the 
fields declared in the class are provided memory space and initialized to their default values. 
If the memory allocation and constructor are successful, a reference to the object is returned 
as a result. In the example in the slide, the reference is assigned to a variable called emp.
To store values (data) into the Employee object instance, you could just assign values to 
each field by accessing the fields directly. However, this is not a good practice and negates 
the principle of encapsulation. Instead, you should invoke instance methods and pass a value 
to the method to set the value of each data field. Later in this lesson, you will look at 
restricting access to the fields to promote encapsulation.
Once all the data fields are set with values, you have an instance of an Employee with an 
empId with a value of 101, name with the string John Smith, Social Security number string 
(ssn) set to 011-22-3467, and salary with the value of 120,345.27.
</p>
<p>Java SE 7 Programming   2 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Creating an Instance of an Object
</p>
<p>To construct or create an instance (object) of the Employee
class, use the new keyword.
/* In some other class, or a main method */
</p>
<p>Employee emp = new Employee();
</p>
<p>emp.empId = 101;   // legal if the field is public,
</p>
<p>// but not good OO practice
</p>
<p>emp.setEmpId(101); // use a method instead
</p>
<p>emp.setName("John Smith");
</p>
<p>emp.setSsn("011-22-3467");
</p>
<p>emp.setSalary(120345.27);
</p>
<p>• In this fragment of Java code, you construct an instance of 
the Employee class and assign the reference to the new 
object to a variable called emp.
</p>
<p>• Then you assign values to the Employee object.
</p>
<p>Invoking an 
instance method.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A constructor is used to create an object. In the Java programming language, constructors are 
declared with the same name as their class used to create an instance of an object. 
Constructors are invoked using the new keyword.
Constructors are covered in more detail in the lesson titled “Encapsulation and Subclassing.”
</p>
<p>Java SE 7 Programming   2 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Constructors
</p>
<p>public class Employee {
</p>
<p>public Employee() {
</p>
<p>}
</p>
<p>}
</p>
<p>Employee emp = new Employee();
</p>
<p>• A constructor is used to create an instance  of a class.
• Constructors can take parameters.
• A constructor that takes no arguments is called a no-arg
</p>
<p>constructor.
</p>
<p>A simple no-argument (no-arg) 
constructor.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Packages
In Java, a package is a group of (class) types. There can be only one package declaration 
for a file.
Packages are more than just a convenience. Packages create a namespace, a logical 
collection of things, like a directory hierarchy.
It is a good practice to always use a package declaration. The package declaration is 
always at the top of the file.
</p>
<p>Java SE 7 Programming   2 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>package Statement
</p>
<p>The package keyword is used in Java to group classes 
together. A package is implemented as a folder and, like a 
folder, provides a namespace to a class.
</p>
<p>com.example.domain +com
</p>
<p>|_+example
</p>
<p>|_+domain
</p>
<p>|_+Employee.java
</p>
<p>|_+Manager.java
</p>
<p>namespace view folder view
</p>
<p>Employee
</p>
<p>Manager
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Imports
You could refer to a class using its fully qualified namespace in your applications, as in the 
following example:
java.util.Date date = new java.util.Date();
</p>
<p>But that would quickly lead to a lot of typing! Instead, Java provides the import statement to 
allow you to declare that you want to reference a class in another package.
Notes:
It is a good practice to use the specific, fully qualified package and class name to avoid 
confusion when there are two classes with the same name, as in the following example: 
java.sql.Date and java.util.Date. The first is a Date class used to store a Date type 
in a database, and java.util.Date is a general purpose Date class. As it turns out, 
java.sql.Date is a subclass of java.util.Date. 
Modern IDEs, like NetBeans and Eclipse, automatically search for and add import statements 
for you. In NetBeans, for example, press Ctrl + Shift + I to fix imports in your code.
</p>
<p>Java SE 7 Programming   2 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>import Statements
</p>
<p>The import keyword is used to identify classes you want to 
reference in your class.
• The import statement provides a convenient way to 
</p>
<p>identify classes that you want to reference in your class.
import java.util.Date;
</p>
<p>• You can import a single class or an entire package:
import java.util.*;
</p>
<p>• You can include multiple import statements:
import java.util.Date;
</p>
<p>import java.util.Calendar;
</p>
<p>• It is good practice to use the full package and class name 
rather than the wildcard * to avoid class name conflicts.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>More on import
</p>
<p>• Import statements follow the package declaration and 
precede the class declaration.
</p>
<p>• An import statement is not required.
• By default, your class always imports java.lang.*
• You do not need to import classes that are in the same 
</p>
<p>package:
package com.example.domain;
</p>
<p>import com.example.domain.Manager; // unused import
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Java language uses pass-by-value for all assignment operations. This means that the 
argument on the right side of the equal sign is evaluated, and the value of the argument is 
assigned to the left side of the equal sign.
For Java primitives, this is straightforward. Java does not pass a reference to a primitive (such 
as an integer), but rather a copy of the value. 
</p>
<p>Java SE 7 Programming   2 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Is Pass-By-Value
</p>
<p>The Java language (unlike C++) uses pass-by-value for all 
assignment operations.
• To visualize this with primitives, consider the following:
int x = 3;
</p>
<p>int y = x;
</p>
<p>• The value of x is copied and passed to y:
</p>
<p>• If x is later modified (for example, x = 5;), the value of y
remains unchanged.
</p>
<p>3 3
</p>
<p>x y
copy the value of x
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>For Java objects, the value of an object reference is the memory pointer to the instance of the 
Employee object created.
When you assign the value of x to y, you are not creating a new Employee object, but rather 
a copy of the value of the reference.
Note: An object is a class instance or an array. The reference values (references) are 
pointers to these objects, and a special null reference, which refers to no object.
</p>
<p>Java SE 7 Programming   2 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Pass-By-Value for Object References
</p>
<p>For Java objects, the value of the right side of an assignment is 
a reference to memory that stores a Java object.
Employee x = new Employee();
</p>
<p>Employee y = x;
</p>
<p>• The reference is some address in memory.  
</p>
<p>• After the assignment, the value of y is the same as the 
value of x: a reference to the same Employee object. 
</p>
<p>42
</p>
<p>42
</p>
<p>x
</p>
<p>y
</p>
<p>Employee
object
</p>
<p>memory address = 42
</p>
<p>y = x;
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In the first line of code, a new object (Employee) is created and the reference to that object is 
assigned to the variable x.
In the second line of code, the value of that reference is passed to a method called foo.
When the foo method is called, (Employee e) holds a reference to the Employee object, x. In 
the next line, the value of e is now a new Employee object, by virtue of the call to the constructor. 
The reference to the x object is replaced by a reference to a new object. The x object remains 
unchanged.
Notes:
The object e, created inside of the method foo, can no longer be referenced when the method 
finishes. As a result, it will be eligible for garbage collection at some future point.
If the code in the foo method was written differently, like this:
public void foo(Employee e) {
</p>
<p>e.setSalary(1_000_000.00):
}
</p>
<p>Then referenced object that the setSalarymethod is being called on is the object referenced by 
x, and after the foo method returns, the object x is modified..
The memory locations 42 and 99 are simply for illustrative purposes.
</p>
<p>Java SE 7 Programming   2 - 30
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objects Passed as Parameters
</p>
<p>• Whenever a new object is created, a new reference is 
created. Consider the following code fragments:
</p>
<p>Employee x = new Employee();
</p>
<p>foo(x);
</p>
<p>public void foo(Employee e) {
</p>
<p>e = new Employee();
</p>
<p>e.setSalary (1_000_000.00);  // What happens to x here?
</p>
<p>}
</p>
<p>• The value of x is unchanged as a result of the method call 
foo:
</p>
<p>42 Employee
object
</p>
<p>99 Employee
object
</p>
<p>x
</p>
<p>e
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>CLASSPATH
</p>
<p>The default value of the classpath is the current working directory (.), however, specifying 
the CLASSPATH variable or the –cp command line switch overrides this value.
The CLASSPATH variable is used by both the Java compiler and the Java interpreter 
(runtime).
The classpath can include:
• A list of directory names (separated by semicolons in Windows and colons in UNIX)
</p>
<p>- The classes are in a package tree relative to any of the directories on the list.
• A .zip or .jar file name that is fully qualified with its path name
</p>
<p>- The classes in these files must be zipped with the path names that are derived 
from the directories formed by their package names.
</p>
<p>Note: The directory containing the root name of the package tree must be added to the 
classpath. Consider putting classpath information in the command window or even in the 
Java command, rather than hard-coding it in the environment.
</p>
<p>Java SE 7 Programming   2 - 31
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>How to Compile and Run
</p>
<p>Java class files must be compiled before running them. 
To compile a Java source file, use the Java compiler (javac).
</p>
<p>javac –cp &lt;path to other classes&gt; -d &lt;compiler output 
path&gt; &lt;path to source&gt;.java
</p>
<p>• You can use the CLASSPATH environment variable to the 
directory above the location of the package hierarchy.
</p>
<p>• After compiling the source .java file, a .class file is 
generated. 
</p>
<p>• To run the Java application, run it by using the Java 
interpreter (java):
</p>
<p>java –cp &lt;path to other classes&gt; &lt;package 
name&gt;.&lt;classname&gt;
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Example
Consider the following simple class in a file named HelloWorld.java in the 
D:\test\com\example directory:
package com.example;
</p>
<p>public class HelloWorld {    
</p>
<p>public static void main (String [] args) {
</p>
<p>if (args.length &lt; 1) {
</p>
<p>System.out.println("Hello World!");
</p>
<p>} else {
</p>
<p>System.out.println("Hello " + args[0] + "!");
</p>
<p>}
</p>
<p>}
</p>
<p>}
</p>
<p>Java SE 7 Programming   2 - 32
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Compiling and Running: Example
</p>
<p>• Assume that the class shown in the notes is in the 
directory D:\test\com\example:
</p>
<p>javac –d D:\test D:\test\com\example\HelloWorld.java
</p>
<p>• To run the application, you use the interpreter and the fully 
qualified class name:
</p>
<p>java –cp D:\test com.example.HelloWorld
</p>
<p>Hello World!
</p>
<p>java –cp D:\test com.example.HelloWorld Tom
</p>
<p>Hello Tom!
</p>
<p>• The advantage of an IDE like NetBeans is that 
management of the class path, compilation, and running 
the Java application are handled through the tool.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Typically, the use of the class loader is completely invisible to you. You can see the results of 
the class loader by using the -verbose flag when you run your application. For example:
java –verbose –classpath D:\test com.example.HelloWorld
</p>
<p>[Loaded java.lang.Object from shared objects file]
</p>
<p>[Loaded java.io.Serializable from shared objects file]
</p>
<p>[Loaded java.lang.Comparable from shared objects file]
</p>
<p>[Loaded java.lang.CharSequence from shared objects file]
</p>
<p>[Loaded java.lang.String from shared objects file]
</p>
<p>[Loaded java.lang.reflect.GenericDeclaration from shared objects 
file]
</p>
<p>[Loaded java.lang.reflect.Type from shared objects file]
</p>
<p>[Loaded java.lang.reflect.AnnotatedElement from shared objects file]
</p>
<p>[Loaded java.lang.Class from shared objects file]
</p>
<p>[Loaded java.lang.Cloneable from shared objects file]
</p>
<p>[Loaded java.lang.ClassLoader from shared objects file]
</p>
<p>... and many more
</p>
<p>Java SE 7 Programming   2 - 33
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Class Loader
</p>
<p>During execution of a Java program, the Java Virtual Machine 
loads the compiled Java class files using a Java class of its 
own called the “class loader” (java.lang.ClassLoader).
• The class loader is called when a class member is used for 
</p>
<p>the first time:
public class Test {
</p>
<p>public void someOperation() {
</p>
<p>Employee e = new Employee();
</p>
<p>//...
</p>
<p>}
</p>
<p>}
</p>
<p>Test.class.getClassLoader().loadClass("Employee");
</p>
<p>The class loader is called to "load" 
this class into memory.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Note: When an object's memory is freed depends upon a number of factors.
Java's garbage collection scheme can be tuned depending on the type of application you are 
creating. For more information, consider taking the Oracle University course Java 
Performance Tuning and Optimization (D69518GC10). 
</p>
<p>Java SE 7 Programming   2 - 34
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Garbage Collection
</p>
<p>When an object is instantiated using the new keyword, memory 
is allocated for the object. The scope of an object reference 
depends on where the object is instantiated:
public void someMethod() {
</p>
<p>Employee e = new Employee();
</p>
<p>// operations on e
</p>
<p>}
</p>
<p>• When someMethod completes, the memory referenced by 
e is no longer accessible.
</p>
<p>• Java's garbage collector recognizes when an instance is 
no longer accessible and eligible for collection.
</p>
<p>Object e scope ends here.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 35
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Create simple Java classes
</p>
<p>– Create primitive variables
– Manipulate Strings
– Use if-else and switch branching statements
– Iterate with loops
– Create arrays
</p>
<p>• Use Java fields, constructors, and methods
• Use package and import statements
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 36
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Using the Employee class defined in this lesson, determine 
what will be printed in the following fragment:
public Employee changeName (Employee e, String name) {
</p>
<p>e.name = name;
</p>
<p>return (e);
</p>
<p>}
</p>
<p>//... in another method in the same class
</p>
<p>Employee e = new Employee();
</p>
<p>e.name = "Fred";
</p>
<p>e = changeName(e, "Bob");
</p>
<p>System.out.println (e.getName());
</p>
<p>a. Fred
b. Bob
c. null
d. an empty String
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 37
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>In the following fragment, what is the printed result?
public float average (int[] values) {
</p>
<p>float result = 0;
</p>
<p>for (int i = 1; i &lt; values.length; i++)
</p>
<p>result += values[i];
</p>
<p>return (result/values.length);
</p>
<p>}
</p>
<p>// ... in another method in the same class
</p>
<p>int[] nums = {100, 200, 300};
</p>
<p>System.out.println (average(nums));
</p>
<p>a. 100.00
b. 150.00
c. 166.66667
d. 200.00
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   2 - 38
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 2-1 Overview: 
Creating Java Classes
</p>
<p>This practice covers the following topics:
• Creating a Java class using the NetBeans IDE
• Creating a Java class with a main method
• Writing code in the body of the main method to create an 
</p>
<p>instance of the Employee object and print values from the 
class to the console
</p>
<p>• Compiling and testing the application using the NetBeans 
IDE
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Encapsulation and Subclassing
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to do the 
following:
• Use encapsulation in Java class design
• Model business problems using Java classes
• Make classes immutable
• Create and use Java subclasses
• Overload methods
• Use variable argument methods
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The term encapsulation is defined by the Java Technology Reference Glossary as follows:
“The localization of knowledge within a module. Because objects encapsulate data and 
implementation, the user of an object can view the object as a black box that provides 
services. Instance variables and methods can be added, deleted, or changed, but if the 
services provided by the object remain the same, the code that uses the object can continue 
to use it without being rewritten.”
An analogy for encapsulation is the steering wheel of a car. When you drive a car, whether it 
is your car, a friend's car, or a rental car, you probably never worry about how the steering 
wheel implements a right-turn or left-turn function. The steering wheel could be connected to 
the front wheels in a number of ways: ball and socket, rack and pinion, or some exotic set of 
servo mechanisms.
As long as the car steers properly when you turn the wheel, the steering wheel encapsulates 
the functions you need―you do not have to think about the implementation.
</p>
<p>Java SE 7 Programming   3 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Encapsulation
</p>
<p>The term encapsulation means to enclose in a capsule, or to 
wrap something around an object to cover it. In object-oriented 
programming, encapsulation covers, or wraps, the internal 
workings of a Java object.
• Data variables, or fields, are hidden from the user of the 
</p>
<p>object.
• Methods, the functions in Java, provide an explicit service 
</p>
<p>to the user of the object but hide the implementation.
• As long as the services do not change, the implementation  
</p>
<p>can be modified without impacting the user.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Simple Model
Suppose that you are asked to create a model of a typical employee. What data might you 
want to represent in an object that describes an employee?
• Employee ID: You can use this as a unique identifier for the employee.
• Name: Humanizing an employee is always a good idea!
• Social Security Number: For United States employees only. You may want some other 
</p>
<p>identification for non-U.S. employees.
• Salary: How much the employee makes is always good to record.
</p>
<p>What operations might you allow on the employee object?
• Change Name: If the employee gets married or divorced, there could be a name 
</p>
<p>change.
• Raise Salary: Increases based on merit
</p>
<p>After an employee object is created, you probably do not want to allow changes to the 
Employee ID or Social Security fields. Therefore, you need a way to create an employee 
without alterations except through the allowed methods.
</p>
<p>Java SE 7 Programming   3 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Encapsulation: Example
</p>
<p>What data and operations would you encapsulate in an object 
that represents an employee?
</p>
<p>Employee ID
Name
Social Security Number
Salary
</p>
<p>Set Name
Raise Salary
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this example, the fields custID, name, and amount are now marked private, making 
them invisible outside of the methods in the class itself.
For example:
CheckingAccount ca = new CheckingAccount():
ca.amount = 1_000_000_000.00;    // illegal!
</p>
<p>Java SE 7 Programming   3 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Encapsulation: Private Data, Public Methods
</p>
<p>One way to hide implementation details is to declare all of the 
fields private.
1 public class CheckingAccount {
</p>
<p>2 private int custID;
</p>
<p>3 private String name;
</p>
<p>4 private double amount;
</p>
<p>5 public CheckingAccount(){
</p>
<p>6 }
</p>
<p>7 public void setAmount (double amount) {
</p>
<p>8 this.amount = amount;
</p>
<p>9 }
</p>
<p>10 public double getAmount () {
</p>
<p>11 return amount;
</p>
<p>12 }
</p>
<p>13 //... other public accessor and mutator methods
</p>
<p>14 }
</p>
<p>Declaring fields private prevents 
direct access to this data from a class 
instance.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Public and Private Access Modifiers
</p>
<p>• The public keyword, applied to fields and methods, 
allows any class in any package to access the field or 
method.
</p>
<p>• The private keyword, applied to fields and methods, 
allows access only to other methods within the class itself.
</p>
<p>CheckingAccount chk = new CheckingAccount ();
</p>
<p>chk.amount = 200; // Compiler error – amount is a private field
</p>
<p>chk.setAmount (200); // OK
</p>
<p>• The private keyword can also be applied to a method to 
hide an implementation detail.
</p>
<p>// Called when a withdrawal exceeds the available funds
</p>
<p>private void applyOverdraftFee () { 
</p>
<p>amount -= fee;
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Revisiting Employee
</p>
<p>The Employee class currently uses public access for all of 
its fields. To encapsulate the data, make the fields private.
package come.example.model;
</p>
<p>public class Employee {
</p>
<p>private int empId;
</p>
<p>private String name;
</p>
<p>private String ssn;
</p>
<p>private double salary;
</p>
<p>//... constructor and methods
</p>
<p>}
</p>
<p>Encapsulation step 1: 
Hide the data (fields).
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Choosing Well-Intentioned Methods
Just as fields should clearly define the type of data that they store, methods should clearly 
identify the operations that they perform. One of the easiest ways to improve the readability of 
your code (Java code or any other) is to write method names that clearly identify what they 
do.
</p>
<p>Java SE 7 Programming   3 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Method Naming: Best Practices
</p>
<p>Although the fields are now hidden using private access, 
there are some issues with the current Employee class.
• The setter methods (currently public access ) allow any 
</p>
<p>other class to change the ID, SSN, and salary (up or 
down).
</p>
<p>• The current class does not really represent the operations 
defined in the original Employee class design.
</p>
<p>• Two best practices for methods:
– Hide as many of the implementation details as possible.
– Name the method in a way that clearly identifies its use or 
</p>
<p>functionality.
• The original model for the Employee class had a Change 
</p>
<p>Name and Increase Salary operation.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The current setter methods in the class allow any class that uses an instance of Employee to 
alter the object’s ID, salary, and SSN fields. From a business standpoint, these are not 
operations you would want on an employee. After the employee is created, these fields 
should be immutable (no changes allowed).
The Employee model as defined in the slide titled “Encapsulation: Example” had only two 
operations: one for changing an employee name (as a result of a marriage or divorce) and 
one for increasing an employee's salary.
To refine the Employee class, the first step is to remove the setter methods and create 
methods that clearly identify their purpose. Here there are two methods, one to change an 
employee name (setName) and the other to increase an employee salary (raiseSalary).
Note that the implementation of the setName method tests the string parameter passed in to 
make sure that the string is not a null. The method can do further checking as necessary.
</p>
<p>Java SE 7 Programming   3 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Employee Class Refined
</p>
<p>1 package com.example.domain; 
</p>
<p>2 public class Employee {
</p>
<p>3 // private fields ...
</p>
<p>4 public Employee () {
</p>
<p>5 }
</p>
<p>6 // Remove all of the other setters
</p>
<p>7 public void setName(String newName) {
</p>
<p>8 if (newName != null) {
</p>
<p>9 this.name = newName;
</p>
<p>10 }
</p>
<p>11 }
</p>
<p>12
</p>
<p>13 public void raiseSalary(double increase) {
</p>
<p>14 this.salary += increase;
</p>
<p>15 }
</p>
<p>16 }
</p>
<p>Encapsulation step 2: 
These method names 
</p>
<p>make sense in the 
context of an 
Employee.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Good Practice: Immutability
Finally, because the class no longer has setter methods, you need a way to set the initial 
value of the fields. The answer is to pass each field value in the construction of the object. By 
creating a constructor that takes all of the fields as arguments, you can guarantee that an 
Employee instance is fully populated with data before it is a valid employee object. This 
constructor replaces the no-arg constructor.
Granted, the user of your class could pass null values, and you need to determine if you want 
to check for those in your constructor. Strategies for handling those types of situations are 
discussed in later lessons.
Removing the setter methods and replacing the no-arg constructor also guarantees that an 
instance of Employee has immutable Employee ID and Social Security Number (SSN) fields.
</p>
<p>Java SE 7 Programming   3 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Make Classes as Immutable as Possible
</p>
<p>1 package com.example.domain;
</p>
<p>2 public class Employee {
</p>
<p>3 // private fields ...
</p>
<p>4 // Create an employee object
</p>
<p>5 public Employee (int empId, String name, 
</p>
<p>6 String ssn, double salary) {
</p>
<p>7 this.empId = empId;
</p>
<p>8 this.name = name;
</p>
<p>9 this.ssn = ssn;
</p>
<p>10 this.salary = salary;
</p>
<p>11 }
</p>
<p>12
</p>
<p>13 public void setName(String newName) { ... }
</p>
<p>14
</p>
<p>15 public void raiseSalary(double increase) { ... }
</p>
<p>16 }
</p>
<p>Encapsulation step 3: 
Replace the no-arg
constructor with a 
constructor to set the 
value of all fields.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Specialization Using Java Subclassing
The Manager class shown here closely resembles the Employee class, but with some 
specialization. A Manager also has a department, with a department name. As a result, there 
are likely to be additional operations as well.
What this demonstrates is that a Manager is an Employee, but an Employee with additional 
features.
However, if we were to define Java classes this way, there would be a lot of redundant 
coding.
</p>
<p>Java SE 7 Programming   3 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Creating Subclasses
</p>
<p>You created a Java class to model the data and operations of 
an Employee. Now suppose you wanted to specialize the data 
and operations to describe a Manager.
1 package com.example.domain;
</p>
<p>2 public class Manager {
</p>
<p>3 private int empId;
</p>
<p>4 private String name;
</p>
<p>5 private String ssn;
</p>
<p>6 private double salary;
</p>
<p>7 private String deptName;
</p>
<p>8 public Manager () {  }
</p>
<p>9 // access and mutator methods...
</p>
<p>10 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Simple Java Program
When an existing class is subclassed, the new class created is said to inherit the 
characteristics of the other class. This new class is called the subclass and is a specialization 
of the superclass. All of the nonprivate fields and methods from the superclass are part of the 
subclass.
So in the diagram in the slide, a Manager class gets empId, name, SSN, salary, and all of 
the public methods from Employee.
It is important to grasp that although Manager specializes Employee, a Manager is still an 
Employee.
Note: The term subclass is a bit of a misnomer. Most people think of the prefix “sub” as 
meaning “less.” However, a Java subclass is the sum of itself and its parent. When you create 
an instance of a subclass, the resulting in-memory structure contains all codes from the 
parent class, grandparent class, and so on all the way up the class hierarchy until you reach 
the class Object.
</p>
<p>Java SE 7 Programming   3 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Subclassing
</p>
<p>In an object-oriented language like Java, subclassing is used to 
define a new class in terms of an existing one.
</p>
<p>superclass: Employee
("parent" class)
</p>
<p>subclass: Manager,
is an Employee
("child" class)
</p>
<p>this means "inherits"
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java Syntax for Subclassing
The keyword extends is used to create a subclass.
The Manager class, by extending the Employee class, inherits all of the nonprivate data 
fields and methods from Employee. After all, if a manager is also an employee, then it follows 
that Manager has all of the same attributes and operations of Employee.
Note that the Manager class declares its own constructor. Constructors are not inherited from 
the parent class. There are additional details about this in the next slide.
The constructor that Manager declares in line 4 calls the constructor of its parent class, 
Employee, using the super keyword. This sets the value of all of the Employee fields: id, 
name, ssn, and salary. Manager is a specialization of Employee, so constructing a 
Manager requires a department name, which is assigned to the deptName field in line 7.
What other methods might you want in a model of Manager? Perhaps you want a method that 
adds an Employee to this Manager. You can use an array or a special class called a 
collection to keep track of the employees for whom this manager is responsible. For details 
about collections, see the lesson titled “Generics and Collections.”
</p>
<p>Java SE 7 Programming   3 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Manager Subclass
</p>
<p>1 package com.example.domain;
</p>
<p>2 public class Manager extends Employee {
</p>
<p>3 private String deptName;
</p>
<p>4 public Manager (int empId, String name, 
</p>
<p>5 String ssn, double salary, String dept) {
</p>
<p>6 super (empId, name, ssn, salary);
</p>
<p>7 this.deptName = dept;
</p>
<p>8 }
</p>
<p>9
</p>
<p>10 public String getDeptName () {
</p>
<p>11 return deptName;
</p>
<p>12 }
</p>
<p>13 // Manager also gets all of Employee's public methods!  
</p>
<p>14 }
</p>
<p>The super keyword is used to 
call the constructor of the parent 
class. It must be the first 
statement in the constructor.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Constructors in Subclasses
Every subclass inherits the nonprivate fields and methods from its parent (superclass). 
However, the subclass does not inherit the constructor from its parent. It must provide a 
constructor.
The Java Language Specification includes the following description:
“Constructor declarations are not members. They are never inherited and therefore are not 
subject to hiding or overriding.” 
</p>
<p>Java SE 7 Programming   3 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Constructors Are Not Inherited
</p>
<p>Although a subclass inherits all of the methods and fields from 
a parent class, it does not inherit constructors. There are two 
ways to gain a constructor:
• Write your own constructor.
• Use the default constructor.
</p>
<p>– If you do not declare a constructor, a default no-arg
constructor is provided for you.
</p>
<p>– If you declare your own constructor, the default constructor is 
no longer provided.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Manager class declares its own constructor and calls the constructor of the parent class 
by using the super keyword.
Note: The super call of the parent's constructor must appear first in the constructor.
The super keyword can also be used to explicitly call the methods of the parent class or 
access fields.
</p>
<p>Java SE 7 Programming   3 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using super in Constructors
</p>
<p>To construct an instance of a subclass, it is often easiest to call 
the constructor of the parent class. 
• In its constructor, Manager calls the constructor of 
</p>
<p>Employee.
</p>
<p>super (empId, name, ssn, salary);
</p>
<p>• The super keyword is used to call a parent's constructor.
• It must be the first statement of the constructor.
• If it is not provided, a default call to super() is inserted 
</p>
<p>for you.
• The super keyword may also be used to invoke a parent's 
</p>
<p>method or to access a parent's (nonprivate) field.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Even though the Manager.java file does not contain all of the methods from the 
Employee.java class (explicitly), they are included in the definition of the object. Thus, after 
you create an instance of a Manager object, you can use the methods declared in 
Employee.
You can also call methods that are specific to the Manager class as well.
</p>
<p>Java SE 7 Programming   3 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Constructing a Manager Object
</p>
<p>Creating a Manager object is the same as creating an 
Employee object:
Manager mgr = new Manager (102, "Barbara Jones", 
</p>
<p>"107-99-9078", 109345.67, "Marketing");
</p>
<p>• All of the Employee methods are available to Manager:
mgr.raiseSalary (10000.00);
</p>
<p>• The Manager class defines a new method to get the 
Department Name:
</p>
<p>String dept = mgr.getDeptName();
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In object-oriented programming languages such as Java, polymorphism is the ability to refer 
to an object using either its actual form or a parent form.
This is particularly useful when creating a general-purpose business method. For example, 
you can raise the salary of any Employee object (parent or child) by simply passing the 
object reference to a general-purpose business method that accepts an Employee object as 
an argument.
</p>
<p>Java SE 7 Programming   3 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>What Is Polymorphism?
</p>
<p>The word polymorphism, strictly defined, means “many forms.”
Employee emp = new Manager();
</p>
<p>• This assignment is perfectly legal. An employee can be a 
manager.
</p>
<p>• However, the following  does not compile:
emp.setDeptName ("Marketing"); // compiler error!
</p>
<p>• The Java compiler recognizes the emp variable only as an 
Employee object. Because the Employee class does not 
have a setDeptName method, it shows an error.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>You might want to design methods with the same intent (method name), like print, to print 
out several different types. You could design a method for each type:
printInt(int i)
</p>
<p>printFloat(float f)
</p>
<p>printString(String s)
</p>
<p>But this would be tedious and not very object-oriented. Instead, you can create a reusable 
method name and change only the argument list. This process is called overloading.
With overloading methods, the argument lists must be different—in order, number, or type. 
And the return types can be different. However, two methods with the same argument list that 
differ only in return type are not allowed.
</p>
<p>Java SE 7 Programming   3 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overloading Methods 
</p>
<p>Your design may call for several methods in the same class 
with the same name but with different arguments.
public void print (int i)
</p>
<p>public void print (float f)
</p>
<p>public void print (String s)
</p>
<p>• Java permits you to reuse a method name for more than 
one method.
</p>
<p>• Two rules apply to overloaded methods:
– Argument lists must differ.
– Return types can be different.
</p>
<p>• Therefore, the following is not legal:
public void print (int i)
</p>
<p>public String print (int i)
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Methods with a Variable Number of the Same Type
One case of overloading is when you need to provide a set of overloaded methods that differ 
in the number of the same type of arguments. For example, suppose you want to have 
methods to calculate an average. You may want to calculate averages for 2, 3, or 4 (or more) 
integers.
Each of these methods performs a similar type of computation—the average of the arguments 
passed in, as in this example:
public class Statistics {
</p>
<p>public float average(int x1, int x2) { return (x1 + x2) / 2; }
</p>
<p>public float average(int x1, int x2, int x3) {
</p>
<p>return (x1 + x2 + x3) / 3;
</p>
<p>}
</p>
<p>public float average(int x1, int x2, int x3, int x4) {
</p>
<p>return (x1 + x2 + x3 + x4) / 4;
</p>
<p>}
</p>
<p>}
</p>
<p>Java provides a convenient syntax for collapsing these three methods into just one and 
providing for any number of arguments.
</p>
<p>Java SE 7 Programming   3 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Methods Using Variable Arguments
</p>
<p>A variation of method overloading is when you need a method 
that takes any number of arguments of the same type:
public class Statistics {
</p>
<p>public float average (int x1, int x2) {}
</p>
<p>public float average (int x1, int x2, int x3) {}
</p>
<p>public float average (int x1, int x2, int x3, int x4) {}    
</p>
<p>}
</p>
<p>• These three overloaded methods share the same 
functionality. It would be nice to collapse these methods 
into one method.
</p>
<p>Statistics stats = new Statistics ();
</p>
<p>float avg1 = stats.average(100, 200);
</p>
<p>float avg2 = stats.average(100, 200, 300);
</p>
<p>float avg3 = stats.average(100, 200, 300, 400);
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Using Variable Arguments
The average method shown in the slide takes any number of integer arguments. The 
notation (int... nums) converts the list of arguments passed to the average method into 
an array object of type int. 
Note: Methods that use varargs can also take no parameters. An invocation of average() 
is legal. You will see varargs as optional parameters in use in the NIO.2 API in the lesson 
titled “Java File I/O.” To account for this, you could rewrite the average method in the slide 
as follows:
public float average(int... nums) {
</p>
<p>int sum = 0; float result = 0;
</p>
<p>if (nums.length &gt; 0) {
</p>
<p>for (int x : nums)   // iterate int array nums
</p>
<p>sum += x;
</p>
<p>result = (float) sum / nums.length;
</p>
<p>}
</p>
<p>return (result);
</p>
<p>}
</p>
<p>}
</p>
<p>Java SE 7 Programming   3 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Methods Using Variable Arguments
</p>
<p>• Java provides a feature called varargs or variable 
arguments.
</p>
<p>1 public class Statistics {
</p>
<p>2 public float average(int... nums) {
</p>
<p>3 int sum = 0;
</p>
<p>4 for (int x : nums) {  // iterate int array nums
</p>
<p>5 sum += x;
</p>
<p>6 }
</p>
<p>7 return ((float) sum / nums.length);
</p>
<p>8 }
</p>
<p>9 }
</p>
<p>• Note that the nums argument is actually an array object of 
type int[]. This permits the method to iterate over and 
allow any number of elements.
</p>
<p>The varargs notation 
treats the nums 
parameter as an array.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Although Java does not permit more than one class to a subclass, the language does provide 
features that enable multiple classes to implement the features of other classes. You will see 
this in the lesson on inheritance.
Single inheritance does not prevent continued refinement and specialization of classes as 
shown above.
In the diagram shown in the slide, a manager can have employees, and a director has a 
budget and can approve expenses.
</p>
<p>Java SE 7 Programming   3 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Single Inheritance
</p>
<p>The Java programming language permits a class to extend only 
one other class. This is called single inheritance. 
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Create simple Java classes
• Use encapsulation in Java class design
• Model business problems using Java classes
• Make classes immutable
• Create and use Java subclasses
• Overload methods
• Use variable argument methods
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Given the diagram in the slide titled “Single Inheritance” and 
the following Java statements, which statements do not
compile?  
Employee e = new Director();
</p>
<p>Manager m = new Director();
</p>
<p>Admin a = new Admin();
</p>
<p>a. e.addEmployee (a);
b. m.addEmployee(a);
c. m.approveExpense(100000.00);
d. All of them fail to compile.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Consider the following classes that do not compile:
public class Account {
</p>
<p>private double balance;
</p>
<p>public Account(double balance) { this.balance = balance; }
</p>
<p>//... getter and setter for balance
</p>
<p>}
</p>
<p>public class Savings extends Account {
</p>
<p>private double interestRate;
</p>
<p>public Savings(double rate) { interestRate = rate; }
</p>
<p>}
</p>
<p>What fix allows these classes to compile?
a. Add a no-arg constructor to Savings.
b. Call the setBalance method of Account from Savings.
c. Change the access of interestRate to public.
d. Replace the  constructor in Savings that calls the 
</p>
<p>constructor of Account using super.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which of the following declarations demonstrates the 
application of good Java naming conventions?  
a. public class repeat { }
b. public void Screencoord (int x, int y){}
c. private int XCOORD;
d. public int calcOffset (int x1, int y1,
</p>
<p>int x2, int y2) { }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>What changes would you perform to make this class 
immutable? (Choose all that apply.)
public class Stock {
</p>
<p>public String symbol;
</p>
<p>public double price;
</p>
<p>public int shares;
</p>
<p>public double getStockValue() { }
</p>
<p>public void setSymbol(String symbol) { }
</p>
<p>public void setPrice(double price) { }
</p>
<p>public void setShares(int number) { }
</p>
<p>}
</p>
<p>a. Make the fields symbol, shares, and price private.
b. Remove setSymbol, setPrice, and setShares.
c. Make the getStockValue method private.
d. Add a constructor that takes symbol, shares, and price
</p>
<p>as arguments.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 3-1 Overview: 
Creating Subclasses
</p>
<p>This practice covers the following topics:
• Applying encapsulation principles to the Employee class 
</p>
<p>that you created in the previous practice
• Creating subclasses of Employee, including Manager, 
</p>
<p>Engineer, and Administrative assistant (Admin)
• Creating a subclass of Manager called Director
• Creating a test class with a main method to test your new 
</p>
<p>classes
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   3 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>(Optional) Practice 3-2 Overview: 
Adding a Staff to a Manager
</p>
<p>This practice covers the following topics:
• Creating an array of Employees called staff
• Creating a method to add an employee to the manager's 
</p>
<p>staff
</p>
<p>• Creating a method to remove an employee from the 
manager's staff
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Class Design
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   4 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to do the 
following:
• Use access levels: private, protected, default, and 
</p>
<p>public.
• Override methods
• Use the instanceof operator to compare object types
• Use virtual method invocation
• Use upward and downward casts
• Override methods from the Object class to improve 
</p>
<p>the functionality of your class
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The access modifier keywords shown in this table are private, protected, and public. 
When a keyword is absent, the default access modifier is applied.
The private keyword provides the greatest control over access to fields and methods. 
With private, a data field or method can be accessed only within the same Java class.
The public keyword provides the greatest access to fields and methods, making them 
accessible anywhere: in the class, package, subclasses, and any other class.
The protected keyword is applied to keep access within the package and subclass. Fields 
and methods that use protected are said to be “subclass-friendly.”
Note: protected access is extended to subclasses that reside in a package different from 
the class that owns the protected feature. As a result, protected fields or methods are actually 
more accessible than those marked with default access control. You should use protected
access when it is appropriate for a class’s subclass, but not unrelated classes.
</p>
<p>Java SE 7 Programming   4 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using Access Control
</p>
<p>You have seen the keywords public and private. There are 
four access levels that can be applied to data fields and 
methods. The following table illustrates access to a field or a 
method marked with the access modifier in the left column.
</p>
<p>Classes can be default (no modifier) or public.
</p>
<p>Modifier 
(keyword)
</p>
<p>Same Class Same 
Package
</p>
<p>Subclass in
Another 
Package
</p>
<p>Universe
</p>
<p>private Yes
</p>
<p>default Yes Yes
</p>
<p>protected Yes Yes Yes *
public Yes Yes Yes Yes
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this example, there are two classes in two packages. Class Foo is in the package demo, 
and declares a data field called result with a protected access modifier.
In the class Bar, which extends Foo, there is a method, reportSum, that adds the value of 
result to sum. The method then attempts to add the value of other to sum. The field 
other is declared using the default modifier, and this generates a compiler error. Why?
Answer: The field result, declared as a protected field, is available to all subclasses, 
even those in a different package. The field other is declared as using default access and is 
only available to classes and subclasses declared in the same package.
This example is from the JavaAccessExample project.
</p>
<p>Java SE 7 Programming   4 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Protected Access Control: Example
</p>
<p>1 package demo;
</p>
<p>2 public class Foo {
</p>
<p>3 protected int result = 20;
</p>
<p>4 int other = 25;
</p>
<p>5 }
</p>
<p>1 package test;
</p>
<p>2 import demo.Foo;
</p>
<p>3 public class Bar extends Foo {
</p>
<p>4 private int sum = 10;
</p>
<p>5 public void reportSum () {
</p>
<p>6 sum += result;
</p>
<p>7 sum += other;
</p>
<p>8 }
</p>
<p>9 } 
</p>
<p>subclass-friendly declaration 
</p>
<p>compiler error
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this example, the class Foo2 declares the field result. However, the class Bar2 declares 
its own field result. The consequence is that the field result from class Foo2 is 
shadowed by the field result in class Bar2. What is sum in this example? sum is now 40 
(10 + 30).  Modern IDEs (such as NetBeans) detect shadowing and produce a warning.
Methods with the same name are not shadowed but are overridden. You learn about 
overriding later in this lesson.
</p>
<p>Java SE 7 Programming   4 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Field Shadowing: Example
</p>
<p>1 package demo;
</p>
<p>2 public class Foo2 {
</p>
<p>3 protected int result = 20;
</p>
<p>4 }
</p>
<p>1 package test;
</p>
<p>2 import demo.Foo2;
</p>
<p>3 public class Bar2 extends Foo2 {
</p>
<p>4 private int sum = 10;
</p>
<p>5 private int result = 30;
</p>
<p>6 public void reportSum() {
</p>
<p>7 sum += result;
</p>
<p>8 }
</p>
<p>9 }
</p>
<p>result field shadows
the parent's field.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A slightly modified version of the example by using the protected keyword is shown in the 
slide. If the idea is to limit access of the field result to classes within the package and the 
subclasses (package-protected), you should make the access explicit by defining a method 
purposefully written for package and subclass-level access.
</p>
<p>Java SE 7 Programming   4 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Access Control: Good Practice
</p>
<p>A good practice when working with fields is to make fields as 
inaccessible as possible, and provide clear intent for the use of 
fields through methods.
1 package demo;
</p>
<p>2 public class Foo3 {
</p>
<p>3 private int result = 20;
</p>
<p>4 protected int getResult() { return result; }
</p>
<p>5 }
</p>
<p>1 package test;
</p>
<p>2 import demo.Foo3;
</p>
<p>3 public class Bar3 extends Foo3 {
</p>
<p>4 private int sum = 10;
</p>
<p>5 public void reportSum() {
</p>
<p>6 sum += getResult();
</p>
<p>7 }
</p>
<p>8 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Although the Employee class has getters to return values for a print statement, it might be 
nice to have a utility method to get specific details about the employee. Consider a method 
added to the Employee class to print details about the Employee object.
In addition to adding fields or methods to a subclass, you can also modify or change the 
existing behavior of a method of the parent (superclass).
You may want to specialize this method to describe a Manager object.
</p>
<p>Java SE 7 Programming   4 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overriding Methods
</p>
<p>Consider a requirement to provide a String that represents 
some details about the Employee class fields.
1 public class Employee {
</p>
<p>2 private int empId;
</p>
<p>3 private String name;
</p>
<p>4 // ... other fields and methods
</p>
<p>5 public String getDetails () {
</p>
<p>6 return "Employee id:  " + empId +
</p>
<p>7 " Employee name:" + name;    
</p>
<p>8 }
</p>
<p>9 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>When a method is overridden, it replaces the method in the superclass (parent) class.
This method is called for any Manager instance.
A call of the form super.getDetails() invokes the getDetails method of the parent 
class.
Note: If, for example, a class declares two public methods with the same name, and a 
subclass overrides one of them, the subclass still inherits the other method.
</p>
<p>Java SE 7 Programming   4 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overriding Methods
</p>
<p>In the Manager class, by creating a method with the same 
signature as the method in the Employee class, you are 
overriding the getDetails method:
1 public class Manager extends Employee {
</p>
<p>2 private String deptName;
</p>
<p>3 // ... other fields and methods
</p>
<p>4 public String getDetails () {
</p>
<p>5 return super.getDetails () + 
</p>
<p>6 " Department: " + deptName;
</p>
<p>7 }
</p>
<p>8 }
</p>
<p>A subclass can invoke a parent method by using the super
keyword.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>During run time, the Java Virtual Machine invokes the getDetails method of the 
appropriate class.  If you comment out the getDetails method in the Manager class shown 
in the previous slide, what happens when m.getDetails() is invoked?
Answer: Recall that methods are inherited from the parent class. So, at run time, the 
getDetails method of the parent class (Employee) is executed.
</p>
<p>Java SE 7 Programming   4 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Invoking an Overridden Method
</p>
<p>• Using the previous examples of Employee and Manager:
Employee e = new Employee (101, "Jim Smith", "011-12-2345", 
</p>
<p>100_000.00);
</p>
<p>Manager m = new Manager (102, "Joan Kern", "012-23-4567", 
110_450.54, "Marketing");
</p>
<p>System.out.println (e.getDetails());
</p>
<p>System.out.println (m.getDetails());
</p>
<p>• The correct getDetails method of each class is called:
Employee id: 101 Employee name: Jim Smith
</p>
<p>Employee id: 102 Employee name: Joan Kern Department: Marketing
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Compiler Versus Runtime Behavior
The important thing to remember is the difference between the compiler (which checks that 
each method and field is accessible based on the strict definition of the class) and the 
behavior associated with an object determined at run time.
This distinction is an important and powerful aspect of polymorphism: The behavior of an 
object is determined by its runtime reference.
Because the object you created was a Manager object, at run time, when the getDetails
method was invoked, the run time reference is to the getDetails method of a Manager
class, even though the variable e is of the type Employee.
This behavior is referred to as virtual method invocation.
Note: If you are a C++ programmer, you get this behavior in C++ only if you mark the method 
by using the C++ keyword virtual.
</p>
<p>Java SE 7 Programming   4 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Virtual Method Invocation
</p>
<p>• What happens if you have the following?
Employee e = new Manager (102, "Joan Kern", "012-23-4567", 
</p>
<p>110_450.54, "Marketing");
</p>
<p>System.out.println (e.getDetails());
</p>
<p>• During execution, the object’s runtime type is determined 
to be a Manager object:
</p>
<p>Employee id: 102 Employee name: Joan Kern Department: Marketing
</p>
<p>• The compiler is satisfied because the Employee class has 
a getDetails method, and at run time the method that is 
executed is referenced from a Manager object.
</p>
<p>• This is an aspect of polymorphism called virtual method 
invocation.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>To override a method, the name and the order of arguments must be identical.
When a method is a subclass overrides a method in the parent class, it must provide the 
same or greater access than the parent class. For example, if the parent method getDetails() 
on the slide was protected, then the overriding method getDetails() in the subclass must be 
protected or public.
</p>
<p>Java SE 7 Programming   4 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Accessibility of Overridden Methods
</p>
<p>An overriding method must provide at least as much access as 
the overridden method in the parent class.
public class Employee {
</p>
<p>//... other fields and methods
</p>
<p>public String getDetails() { ... }
</p>
<p>}
</p>
<p>public class Manager extends Employee {
</p>
<p>//... other fields and methods
</p>
<p>private String getDetails() { //... }  // Compile time error
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Design Problem
What is the problem in the example in the slide?  Each method performs the calculation 
based on the type of employee passed in, and returns the number of shares.
Consider what happens if you add two or three more employee types. You would need to add 
three additional methods, and possibly replicate code depending upon the business logic 
required to compute shares.
Clearly, this is not a good way to treat this problem. Although the code will work, this is not 
easy to read and is likely to create much duplicate code.
</p>
<p>Java SE 7 Programming   4 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Applying Polymorphism
</p>
<p>Suppose that you are asked to create a new class that 
calculates a stock grant for employees based on their salary 
and their role (manager, engineer, or admin):
1 public class EmployeeStockPlan {
</p>
<p>2 public int grantStock (Manager m) {
</p>
<p>3 // perform a calculation for a Manager
</p>
<p>4 }
</p>
<p>5 public int grantStock (Engineer e) {
</p>
<p>6 // perform a calculation for an Engineer
</p>
<p>7 }
</p>
<p>8 public int grantStock (Admin a) {
</p>
<p>9 // perform a calculation for an Admin
</p>
<p>10 }
</p>
<p>11 //... one method per employee type
</p>
<p>12}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Use the Most Generic Form
A good practice is to design and write methods that take the most generic form of your object 
possible.
In this case, Employee is a good base class to start from. 
</p>
<p>Java SE 7 Programming   4 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Applying Polymorphism
</p>
<p>A good practice is to pass parameters and write methods that 
use the most generic form of your object as possible.
public class EmployeeStockPlan {
</p>
<p>public int grantStock (Employee e) {
</p>
<p>// perform a calculation based on Employee data
</p>
<p>}
</p>
<p>}
</p>
<p>// In the application class
</p>
<p>EmployeeStockPlan esp = new EmployeeStockPlan ():
</p>
<p>Manager m = new Manager ();
</p>
<p>int stocksGranted = esp.grantStock(m);
</p>
<p>...
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this modified EmployeeStockPlan, the grantStock method calls a method defined by 
the base class, Employee, that returns a base stock count. The EmployeeStockPlan class 
uses a multiplier to determine how many stocks to grant. A class may override the 
calculateStock method (as the Manager class does here) based on business policy.
In this approach, regardless of the number of different Employee types (all extending the 
Employee object) the EmployeeStockPlan class will always function.
</p>
<p>Java SE 7 Programming   4 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Applying Polymorphism
</p>
<p>Adding a method to Employee allows EmployeeStockPlan
to use polymorphism to calculate stock.
public class Employee {
</p>
<p>protected int calculateStock() { return 10; }
</p>
<p>}
</p>
<p>public class Manager extends Employee {
</p>
<p>public int calculateStock() { return 20; }
</p>
<p>}
</p>
<p>public class EmployeeStockPlan {
</p>
<p>private float stockMultiplier;   // Calculated elsewhere
</p>
<p>public int grantStock (Employee e) {
</p>
<p>return (int)(stockMultipier * e.calculateStock());
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In this example, a class, EmployeeRequisition has a method that uses the instanceof
keyword to determine if the object can open an requisition for an employee. Per the business 
policy, only Managers and above can open a requisition for a new employee.
</p>
<p>Java SE 7 Programming   4 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using the instanceof Keyword
</p>
<p>The Java language provides the instanceof keyword to 
determine an object’s class type at run time.
1 public class EmployeeRequisition {
</p>
<p>2 public boolean canHireEmployee(Employee e) {
</p>
<p>3 if (e instanceof Manager) {
</p>
<p>4 return true;
</p>
<p>5 } else {
</p>
<p>6 return false;
</p>
<p>7 }
</p>
<p>8 }
</p>
<p>9 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Although a generic superclass reference is useful for passing objects around, you may need 
to use a method from the subclass.
In the slide, for example, you need the setDeptName method of the Manager class. To 
satisfy the compiler, you can cast a reference from the generic superclass to the specific 
class.
However, there are rules for casting references. You see these in the next slide.
Note: The instanceof operator shown in the slide is not required by the compiler before the 
cast. However, without checking the object's type, if a non-Manager object type is passed to 
the modifyDeptForManager method, an exception (ClassCastException) will be 
thrown at runtime.
</p>
<p>Java SE 7 Programming   4 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Casting Object References
</p>
<p>In order to access a method in a subclass passed as an 
generic argument, you must cast the reference to the class 
that will satisfy the compiler:
1 public void modifyDeptForManager (Employee e, String dept) {
</p>
<p>2 if (e instanceof Manager) {
</p>
<p>3 Manager m = (Manager) e;
</p>
<p>4 m.setDeptName (dept);
</p>
<p>5 }
</p>
<p>6 }
</p>
<p>Without the cast to Manager, the setDeptName method 
would not compile.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   4 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Casting Rules
</p>
<p>Upward casts are always permitted and do not require a cast 
operator.
Director d = new Director();
</p>
<p>Manager m = new Manager();
</p>
<p>Employee e = m; // OK
</p>
<p>Manager m = d; // OK
</p>
<p>Employee e = d; // OK
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Downward Casts
With a downward cast, the compiler simply determines if the cast is possible; if the cast down 
is to a subclass, then it is possible that the cast will succeed.
Note that at run time the cast results in a java.lang.ClassCastException if the object 
reference is of a superclass and not of the class type or a subclass.
The cast of the variable e to a Manager reference m satisfies the compiler, because Manager
and Employee are in the same class hierarchy, so the cast will possibly succeed.  This cast 
also works at run time, because it turns out that the variable e is actually a Manager object.  
This cast would also work at run time if e pointed to an instance of a Director object.
The cast of the variable m to a Director instance satisfies the compiler, but because m is 
actually a Manager instance, this cast fails at run time with a ClassCastException.
Finally, any cast will fail that is outside the class hierarchy, such as the cast from a Manager
instance to an Engineer. A Manager and an Engineer are both employees, but a 
Manager is not an Engineer.
</p>
<p>Java SE 7 Programming   4 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Casting Rules
</p>
<p>For downward casts, the compiler must be satisfied that the 
cast is at least possible.
Employee e = new Manager();
</p>
<p>Manager m = new Manager();
</p>
<p>Manager m = (Manager)e;
</p>
<p>// Would also work if
</p>
<p>// e was a Director obj
</p>
<p>Director d = (Director)m;
</p>
<p>// fails at run time
</p>
<p>Engineer eng = (Engineer)m;
</p>
<p>// compiler error
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Best Practice: Overload Object Methods
The java.lang.Object class is the root class of all classes in the Java programming 
language. All classes will subclass Object by default.
Object defines several nonfinal methods that are designed to be overridden by your class. 
These are equals, hashCode, toString, clone, and finalize. Of these, there are three 
methods that you should consider overriding.
</p>
<p>Java SE 7 Programming   4 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overriding Object methods
</p>
<p>One of the advantages of single inheritance is that every class 
has a parent object by default. The root class of every Java 
class is java.lang.Object.
• You do not have to declare that your class extends 
</p>
<p>Object. The compiler does that for you.
public class Employee { //... }
</p>
<p>is equivalent to:
public class Employee extends Object { //... }
</p>
<p>• The root class contains several nonfinal methods, but 
there are three that are important to consider overriding:
– toString,  equals, and hashCode
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The println method is overloaded with a number of parameter types. When you invoke 
System.out.println(e); the method that takes an Object parameter is matched and 
invoked. This method in turn invokes the toString() method on the object instance. 
Note: Sometimes you may want to be able to print out the name of the class that is executing 
a method. The getClass() method is an Object method used to return the Class object 
instance, and the getName() method provides the fully qualified name of the runtime class. 
getClass().getName(); // returns the name of this class instance
</p>
<p>These methods are in the Object class.
</p>
<p>Java SE 7 Programming   4 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Object toString Method
</p>
<p>The toString method is called to return the string value of an 
object. For example, using the method println:
Employee e = new Employee (101, "Jim Kern", ...)
</p>
<p>System.out.println (e);
</p>
<p>• String concatenation operations also invoke toString:
String s = "Employee: " + e;
</p>
<p>• You can use toString to provide instance information:
public String toString () {
</p>
<p>return "Employee id:  " + empId + "\n" +
</p>
<p>"Employee name:" + name;
</p>
<p>}
</p>
<p>• This is a better approach to getting details about your class 
than creating your own getDetails method.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The equals method of Object determines (by default) only if the values of two object 
references point to the same object. Basically, the test in the Object class is simply as 
follows:
</p>
<p>If x == y, return true. 
For an object (like the Employee object) that contains values, this comparison is not 
sufficient, particularly if we want to make sure there is one and only one employee with a 
particular ID.
</p>
<p>Java SE 7 Programming   4 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Object equals Method
</p>
<p>The Object equals method compares only object references.
• If there are two objects x and y in any class, x is equal to y 
</p>
<p>if and only if x and y refer to the same object.
• Example:
Employee x = new Employee (1,"Sue","111-11-1111",10.0);
</p>
<p>Employee y = x;
</p>
<p>x.equals (y); // true
</p>
<p>Employee z = new Employee (1,"Sue","111-11-1111",10.0);
</p>
<p>x.equals (z); // false!
</p>
<p>• Because what we really want is to test the contents of the 
Employee object, we need to override the equals method:
</p>
<p>public boolean equals (Object o) { ... }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This simple equals test first tests to make sure that the object passed in is not null, and then 
tests to make sure that it is an instance of an Employee class (all subclasses are also 
employees, so this works). Then the Object is cast to Employee, and each field in 
Employee is checked for equality.
Note: For String types, you should use the equals method to test the strings character by 
character for equality.
</p>
<p>Java SE 7 Programming   4 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overriding equals in Employee
</p>
<p>An example of overriding the equals method in the Employee 
class compares every field for equality:
1 public boolean equals (Object o) {
</p>
<p>2 boolean result = false;
</p>
<p>3 if ((o != null) &amp;&amp; (o instanceof Employee)) {
</p>
<p>4 Employee e = (Employee)o;
</p>
<p>5 if ((e.empId == this.empId) &amp;&amp;
</p>
<p>6 (e.name.equals(this.name)) &amp;&amp;
</p>
<p>7 (e.ssn.equals(this.ssn)) &amp;&amp; 
</p>
<p>8 (e.salary == this.salary)) {
</p>
<p>9 result = true;
</p>
<p>10 }
</p>
<p>11 }
</p>
<p>12 return result;
</p>
<p>13 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Overriding hashCode
The Java documentation for the Object class states:
"... It is generally necessary to override the hashCode method whenever this method 
[equals] is overridden, so as to maintain the general contract for the hashCode method, 
which states that equal objects must have equal hash codes."
The hashCode method is used in conjunction with the equals method in hash-based 
collections, such as HashMap, HashSet, and Hashtable.
This method is easy to get wrong, so you need to be careful. The good news is that IDEs 
such as NetBeans can generate hashCode for you.
To create your own hash function, the following will help approximate a reasonable hash 
value for equal and unequal instances:
</p>
<p>1) Start with a nonzero integer constant. Prime numbers result in fewer hashcode 
collisions.
</p>
<p>2) For each field used in the equals method, compute an int hash code for the field. 
Notice that for the Strings, you can use the hashCode of the String.
</p>
<p>3) Add the computed hash codes together.
4) Return the result.
</p>
<p>Java SE 7 Programming   4 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Overriding Object hashCode
</p>
<p>The general contract for Object states that if two objects are 
considered equal (by using the equals method), then integer 
hashcode returned for the two objects should also be equal.
1 // Generated by NetBeans
</p>
<p>2 public int hashCode() {
</p>
<p>3 int hash = 7;
</p>
<p>4 hash = 83 * hash + this.empId;
</p>
<p>5 hash = 83 * hash + Objects.hashCode(this.name);
</p>
<p>6 hash = 83 * hash + Objects.hashCode(this.ssn);
</p>
<p>7 hash = 83 * hash + 
</p>
<p>8 (int)(Double.doubleToLongBits(this.salary) ^ 
</p>
<p>9 (Double.doubleToLongBits(this.salary) &gt;&gt;&gt; 32));
</p>
<p>10 return hash;
</p>
<p>11 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   4 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Use access levels: private, protected, default, and 
</p>
<p>public
</p>
<p>• Override methods
• Use the instanceof operator to compare object types
• Use virtual method invocation
• Use upward and downward casts
• Override methods from the Object class
</p>
<p>to improve the functionality of your class
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Answer: e
Because the Checking class extends Account, the withdraw method declared in 
Checking overrides the withdraw method in Account. At run time, the method for the 
object (Checking) is executed.
</p>
<p>Java SE 7 Programming   4 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Suppose that you have an Account class with a withdraw()
method, and a Checking class that extends Account that 
declares its own withdraw() method. What is the result of the 
following code fragment?
1 Account acct = new Checking();
</p>
<p>2 acct.withdraw(100);
</p>
<p>a. The compiler complains about line 1.
b. The compiler complains about line 2.
c. Runtime error: incompatible assignment (line 1)
d. The Account class withdraw() method executes.
e. The Checking class withdraw() method executes.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Answer: a 
Actually, acct is also an instanceof the Account class.
</p>
<p>Java SE 7 Programming   4 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Suppose that you have an Account class and a Checking
class that extends Account. The body of the if statement in 
line 2 will execute.
1 Account acct = new Checking();
</p>
<p>2 if (acct instanceof Checking) { // will this block run? }
</p>
<p>a. True
b. False
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Answer: b
The compiler will assume that it is possible to cast an Account type object to another 
Account. Because Savings extends from Account, this looks like a typical downward cast. 
However, at run time, the true type of the object is determined, and you cannot cast between 
children.
</p>
<p>Java SE 7 Programming   4 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Suppose that you have an Account class and a Checking
class that extends Account. You also have a Savings class 
that extends Account. What is the result of the following code?
1 Account acct1 = new Checking();
</p>
<p>2 Account acct2 = new Savings();
</p>
<p>3 Savings acct3 = (Savings)acct1;
</p>
<p>a. acct3 contains the reference to acct1.
b. A runtime ClassCastException occurs.
c. The compiler complains about line 2.
d. The compiler complains about the cast in line 3.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Answer: b
</p>
<p>Java SE 7 Programming   4 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>1 package com.bank;
</p>
<p>2 public class Account {
</p>
<p>3 double balance;
</p>
<p>4 }
</p>
<p>10 package com.bank.type;
</p>
<p>11 import com.bank.Account;
</p>
<p>12 public class Savings extends Account {
</p>
<p>13 private double interest;
</p>
<p>14 Account acct = new Account();
</p>
<p>15 public double getBalance (){ return (interest + balance); }
</p>
<p>16 }
</p>
<p>What  change would make this code compile?
a. Make balance private in line 3.
b. Make balance protected in line 3.
c. Replace balance with acct.balance in line 15.
d. Replace balance with Account.balance in line 15.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   4 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 4-1 Overview: 
Overriding Methods and Applying Polymorphism
</p>
<p>This practice covers the following topics:
• Modifying the Employee, Manager, and Director
</p>
<p>classes; overriding the toString() method
• Creating an EmployeeStockPlan class with a grant 
</p>
<p>stock method that uses the instanceof keyword
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Advanced Class Design
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to do the 
following:
• Design general-purpose base classes by using abstract 
</p>
<p>classes
• Construct abstract Java classes and subclasses
• Model business problems by using the static and final
</p>
<p>keywords
• Implement the singleton design pattern
• Distinguish between top-level and nested classes
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Class Inheritance
When designing an object-oriented solution, you should attempt to avoid code duplication. 
One technique to avoid duplication is to create library methods and classes. Libraries function 
as a central point to contain often reused code. Another technique to avoid code duplication is 
to use class inheritance. When there is a shared base type identified between two classes, 
any shared code may be placed in a parent class.
When possible, use object references of the most generic base type possible. In Java, 
generalization and specialization enable reuse through method inheritance and virtual method 
invocation (VMI). VMI, sometimes called “late-binding,” enables a caller to dynamically call a 
method as long as the method has been declared in a generic base type.
</p>
<p>Java SE 7 Programming   5 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Modeling Business Problems with Classes
</p>
<p>Inheritance (or subclassing) is an essential feature of the Java 
programming language. Inheritance provides code reuse 
through:
• Method inheritance: Subclasses avoid code duplication by 
</p>
<p>inheriting method implementations.
• Generalization: Code that is designed to rely on the most 
</p>
<p>generic type possible is easier to maintain.
</p>
<p>Class Inheritance Diagram
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Coding for Generalization
Always use the most generic reference type possible. Java IDEs may contain refactoring tools 
that assist in changing existing references to a more generic base type.
</p>
<p>Java SE 7 Programming   5 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Enabling Generalization
</p>
<p>Coding to a common base type allows for the introduction of 
new subclasses with little or no modification of any code that 
depends on the more generic base type.
</p>
<p>ElectronicDevice dev = new Television();
</p>
<p>dev.turnOn(); // all ElectronicDevices can be turned on
</p>
<p>Always use the most generic reference type possible.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Method Implementations
When sibling classes have a common method, it is typically placed in a parent class. Under 
some circumstances, however, the parent class's implementation will always need to be 
overridden with a specialized implementation. 
In these cases, inclusion of the method in a parent class has both advantages and 
disadvantages. It allows the use of generic reference types, but developers can easily forget 
to supply the specialized implementation in the subclasses.
</p>
<p>Java SE 7 Programming   5 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Identifying the Need for Abstract Classes
</p>
<p>Subclasses may not need to inherit a method implementation if 
the method is specialized.
</p>
<p>public class Television extends ElectronicDevice {
</p>
<p>public void turnOn() {
</p>
<p>changeChannel(1);
</p>
<p>initializeScreen();
</p>
<p>}
</p>
<p>public void turnOff() {}
</p>
<p>public void changeChannel(int channel) {}
</p>
<p>public void initializeScreen() {}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Declaring a class as abstract prevents any instances of that class from being created. It is a 
compile-time error to instantiate an abstract class. An abstract class will typically be extended 
by a child class and may be used as a reference type.
</p>
<p>Java SE 7 Programming   5 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Defining Abstract Classes
</p>
<p>A class can be declared as abstract by using the abstract
class-level modifier.
</p>
<p>public abstract class ElectronicDevice { }
</p>
<p>• An abstract class can be subclassed.
</p>
<p>public class Television extends ElectronicDevice { }
</p>
<p>• An abstract class cannot be instantiated.
</p>
<p>ElectronicDevice dev = new ElectronicDevice(); // error
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Inheriting Abstract Methods
When a child class inherits an abstract method, it is inheriting a method signature but no 
implementation. For this reason, no braces are allowed when defining an abstract method. 
An abstract method is a way to guarantee that any child class will contain a method with a 
matching signature.
</p>
<p>Java SE 7 Programming   5 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Defining Abstract Methods
</p>
<p>A method can be declared as abstract by using the abstract
method-level modifier.
</p>
<p>public abstract class ElectronicDevice {
</p>
<p>public abstract void turnOn();
</p>
<p>public abstract void turnOff();
</p>
<p>}
</p>
<p>An abstract method:
• Cannot have a method body
• Must be declared in an abstract class
• Is overridden in subclasses
</p>
<p>No braces
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Making Use of Abstract Classes
While it is possible to avoid implementing an abstract method by declaring child classes as 
abstract, this only serves to delay the inevitable. Applications require nonabstract methods to 
create objects. Use abstract methods to outline functionality required in child classes.
</p>
<p>Java SE 7 Programming   5 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Validating Abstract Classes
</p>
<p>The following additional rules apply when you use abstract 
classes and methods:
• An abstract class may have any number of abstract and 
</p>
<p>nonabstract methods.
• When inheriting from an abstract class, you must do either 
</p>
<p>of the following:
– Declare the child class as abstract.
– Override all abstract methods inherited from the parent class. 
</p>
<p>Failure to do so will result in a compile-time error.
</p>
<p>error: Television is not abstract and does not override 
abstract method turnOn() in ElectronicDevice
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>To compile successfully, an abstract method must not have:
a. A return value
b. A method implementation
c. Method parameters
d. private access
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java: Object-oriented by Design
The Java programming language was designed as an object-oriented language, unlike 
languages like Objective-C and C++, which inherited the procedural design of C. When 
developing in Java, you should always attempt to design an object-oriented solution.
</p>
<p>Java SE 7 Programming   5 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>static Keyword
</p>
<p>The static modifier is used to declare fields and methods as 
class-level resources. Static class members:
• Can be used without object instances
• Are used when a problem is best solved without objects
• Are used when objects of the same type need to share 
</p>
<p>fields
• Should not be used to bypass the object-oriented features 
</p>
<p>of Java unless there is a good reason
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Factory Methods
In place of directly invoking constructors, you will often use static methods to retrieve object 
references. Unless something unexpected happens, a new object is created whenever a 
constructor is called. A static factory method could maintain a cache of objects for reuse or 
create new instances if the cache was depleted. A factory method may also produce an object 
that subclasses the method’s return type. 
Example:
</p>
<p>NumberFormat nf = NumberFormat.getInstance();
</p>
<p>Java SE 7 Programming   5 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Static Methods
</p>
<p>Static methods are methods that can be called even if the class 
they are declared in has not been instantiated. Static methods:
• Are called class methods
• Are useful for APIs that are not object oriented.
</p>
<p>– java.lang.Math contains many static methods
• Are commonly used in place of constructors to perform 
</p>
<p>tasks related to object initialization
• Cannot access nonstatic members within the same class
• Can be hidden in subclasses but not overridden
</p>
<p>– No virtual method invocation
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Static Method Limitations
Static methods can be used before any instances of their enclosing class have been created. 
Chronologically speaking, this means that in a running Java Virtual Machine, there may not be 
any occurrences of the containing classes’ instance variables. Static methods can never 
access their enclosing classes’ instance variables or call their nonstatic methods.
</p>
<p>Java SE 7 Programming   5 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Implementing Static Methods
</p>
<p>public class StaticErrorClass {
private int x;
</p>
<p>public static void staticMethod() {
x = 1; // compile error
instanceMethod(); // compile error
</p>
<p>}
</p>
<p>public void instanceMethod() {
x = 2;
</p>
<p>}
}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Calling Static Methods
</p>
<p>double d = Math.random();
</p>
<p>StaticUtilityClass.printMessage();
</p>
<p>StaticUtilityClass uc = new StaticUtilityClass();
</p>
<p>uc.printMessage(); // works but misleading
</p>
<p>sameClassMethod();
</p>
<p>When calling static methods, you should: 
• Qualify the location of the method with a class name if the 
</p>
<p>method is located in a different class than the caller
– Not required for methods within the same class
</p>
<p>• Avoid using an object reference to call a static method
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Class Loading
Application developer-supplied classes are typically loaded on demand (first use). Static 
variables are initialized when their enclosing class is loaded. An attempt to access a static 
class member can trigger the loading of a class.
</p>
<p>Java SE 7 Programming   5 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Static Variables
</p>
<p>Static variables are variables that can be accessed even if the 
class they are declared in has not been instantiated. Static 
variables are:
• Called class variables
• Limited to a single copy per JVM
• Useful for containing shared data
</p>
<p>– Static methods store data in static variables.
– All object instances share a single copy of any static 
</p>
<p>variables.
• Initialized when the containing class is first loaded
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Persisting Static Variables
Many technologies that are used to persist application state in Java only save instance 
variables. Maintaining a single object that keeps track of “shared” state may be used as an 
alternative to static variables.
</p>
<p>Java SE 7 Programming   5 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Defining Static Variables
</p>
<p>public class StaticCounter {    
private static int counter = 0;
</p>
<p>public StaticCounter() {
counter++;
</p>
<p>}
</p>
<p>public static int getCount() {
return counter;
</p>
<p>}
}
</p>
<p>Only one copy in 
memory
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Object References to Static Members
Just as using object references to static methods should be avoided, you should also avoid 
using object references to access static variables. If all the members of a class are static, 
consider using a private constructor to prevent object instantiation.
</p>
<p>Java SE 7 Programming   5 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using Static Variables
</p>
<p>double p = Math.PI;
</p>
<p>new StaticCounter();
</p>
<p>new StaticCounter();
</p>
<p>System.out.println("count: " + StaticCounter.getCount());
</p>
<p>When accessing static variables, you should: 
• Qualify the location of the variable with a class name if the 
</p>
<p>variable is located in a different class than the caller
– Not required for variables within the same class
</p>
<p>• Avoid using an object reference to access a static variable
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Overusing static import can negatively affect the readability of your code. Avoid adding 
multiple static imports to a class.
</p>
<p>Java SE 7 Programming   5 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Static Imports
</p>
<p>A static import statement makes the static members of a class 
available under their simple name.
• Given either of the following lines:
import static java.lang.Math.random;
</p>
<p>import static java.lang.Math.*;
</p>
<p>• Calling the Math.random()method can be written as:
public class StaticImport {
</p>
<p>public static void main(String[] args) {
</p>
<p>double d = random();
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>The number of instances of a static variable is related to the 
number of objects that have been created.
a. True
b. False
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Performance Myths
There is little to no performance benefit when you declare a method as final. Methods should 
be declared as final only to disable method overriding. 
</p>
<p>Java SE 7 Programming   5 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Final Methods
</p>
<p>A method can be declared final. Final methods may not be 
overridden.
</p>
<p>public class MethodParentClass {
</p>
<p>public final void printMessage() {
</p>
<p>System.out.println("This is a final method");
</p>
<p>}
</p>
<p>}
</p>
<p>public class MethodChildClass extends MethodParentClass {    
</p>
<p>// compile-time error
</p>
<p>public void printMessage() {
</p>
<p>System.out.println("Cannot override method");
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Final Classes
</p>
<p>A class can be declared final. Final classes may not be 
extended.
</p>
<p>public final class FinalParentClass { }
</p>
<p>// compile-time error
</p>
<p>public class ChildClass extends FinalParentClass { }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Benefits and Drawbacks of Final Variables
Bug Prevention
Final variables can never have their values modified after they are initialized. This behavior 
functions as a bug-prevention mechanism.
Thread Safety
The immutable nature of final variables eliminates any of the concerns that come with 
concurrent access by multiple threads.
Final Reference to Objects
A final object reference only serves to prevent a reference from pointing to another object. 
If you are designing immutable objects, you must prevent the object's fields from being 
modified. Final references also prevent you from assigning a value of null to the reference. 
Maintaining an object's references prevents that object from being available for garbage 
collection.
</p>
<p>Java SE 7 Programming   5 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Final Variables
</p>
<p>The final modifier can be applied to variables. Final variables 
may not change their values after they are initialized. Final 
variables can be:
• Class fields
</p>
<p>– Final fields with compile-time constant expressions are 
constant variables.
</p>
<p>– Static can be combined with final to create an always-
available, never-changing variable.
</p>
<p>• Method parameters
• Local variables
</p>
<p>Note: Final references must always reference the same object, 
but the contents of that object may be modified.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Final Fields
Initializing
Final fields (instance variables) must be either of the following:
• Assigned a value when declared
• Assigned a value in every constructor
</p>
<p>Static and Final Combined
A field that is both static and final is considered a constant. By convention, constant fields use 
identifiers consisting of only uppercase letters and underscores.
</p>
<p>Java SE 7 Programming   5 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Declaring Final Variables
public class VariableExampleClass {
</p>
<p>private final int field;
private final int forgottenField;
private final Date date = new Date();
public static final int JAVA_CONSTANT = 10;
</p>
<p>public VariableExampleClass() {
field = 100;
// compile-time error – forgottenField
// not initialized
</p>
<p>}
</p>
<p>public void changeValues(final int param) {
param = 1; // compile-time error
date.setTime(0); // allowed
date = new Date(); // compile-time error
final int localVar;
localVar = 42;
localVar = 43; // compile-time error
</p>
<p>}
}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>A final field (instance variable) can be assigned a value either 
when declared or in all constructors.
a. True
b. False
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Runtime Range Checking
In the example in the slide, you must perform a runtime range check when using an int to 
represent state. Within the setState method, an if statement can be used to validate that 
only the values 0, 1, or 2 are accepted. This type of check is performed every time the 
setState method is called, resulting in additional overhead.
</p>
<p>Java SE 7 Programming   5 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>When to Avoid Constants
</p>
<p>public static final variables can be very useful, but there 
is a particular usage pattern you should avoid. Constants may 
provide a false sense of input validation or value range 
checking.
• Consider a method that should receive only one of three 
</p>
<p>possible values:
Computer comp = new Computer();
</p>
<p>comp.setState(Computer.POWER_SUSPEND);
</p>
<p>• The following lines of code still compile:
Computer comp = new Computer();
</p>
<p>comp.setState(42);
</p>
<p>This is an int constant 
that equals 2.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Compile-Time Range Checking
In the example in the slide, the compiler performs a compile-time check to ensure that only 
valid PowerState instances are passed to the setState method. No range checking 
overhead is incurred at run time. 
</p>
<p>Java SE 7 Programming   5 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Typesafe Enumerations
</p>
<p>Java 5 added a typesafe enum to the language. Enums:
• Are created using a variation of a Java class
• Provide a compile-time range check
public enum PowerState {
</p>
<p>OFF,
</p>
<p>ON,
</p>
<p>SUSPEND;
</p>
<p>}
</p>
<p>An enum can be used in the following way:
Computer comp = new Computer();
</p>
<p>comp.setState(PowerState.SUSPEND); This method takes a 
PowerState reference .
</p>
<p>These are references to the 
only three PowerState
objects that can exist.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Note: When an enum is used in a switch statement, only the enum constants can be used 
as labels for the case statements.
</p>
<p>Java SE 7 Programming   5 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Enum Usage
</p>
<p>Enums can be used as the expression in a switch statement.
public void setState(PowerState state) {
</p>
<p>switch(state) {
</p>
<p>case OFF:
</p>
<p>turnOn();
</p>
<p>break;
</p>
<p>case ON:
</p>
<p>turnOff();
</p>
<p>break;
</p>
<p>case SUSPEND:
</p>
<p>suspend();
</p>
<p>break;
</p>
<p>}
</p>
<p>System.out.println(state);
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Enum Constructors
You may not instantiate an enum instance with new. 
</p>
<p>Java SE 7 Programming   5 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Complex Enums
</p>
<p>Enums can have fields, methods, and private constructors.
public enum PowerState {
</p>
<p>OFF("The power is off"),
</p>
<p>ON("The usage power is high"),
</p>
<p>SUSPEND("The power usage is low");
</p>
<p>private String description;
</p>
<p>private PowerState(String d) {
</p>
<p>description = d;
</p>
<p>}
</p>
<p>public String getDescription() {
</p>
<p>return description;
</p>
<p>}
</p>
<p>}
</p>
<p>The constructor may not be 
public or protected.
</p>
<p>Call a PowerState constructor 
to initialize the public static 
</p>
<p>final OFF reference.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>An enum can have a constructor with the following access 
levels:
a. public
b. protected
c. Default (no declared access level)
d. private
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Design Pattern Catalogs
Pattern catalogs are available for many programming languages. Most of the traditional 
design patterns apply to any object-oriented programming language. One of the most popular 
books, Design Patterns: Elements of Reusable Object-Oriented Software, uses a combination 
of C++, Smalltalk, and diagrams to show possible pattern implementations. Many Java 
developers still reference this book because the concepts translate to any object-oriented 
language.
You learn more about design patterns and other Java best practices in the Java Design 
Patterns course.
</p>
<p>Java SE 7 Programming   5 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Design Patterns
</p>
<p>Design patterns are:
• Reusable solutions to common software development 
</p>
<p>problems
• Documented in pattern catalogs
</p>
<p>– Design Patterns: Elements of Reusable Object-Oriented 
Software, written by Erich Gamma et al. (the “Gang of Four”)
</p>
<p>• A vocabulary used to discuss design
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Implementing the Singleton Pattern
The singleton design pattern is one of the creational design patterns that are categorized in 
Design Patterns: Elements of Reusable Object-Oriented Software. 
To implement the singleton design pattern:
</p>
<p>1. Use a static reference to point to the single instance. Making the reference final ensures 
that it will never reference a different instance.
</p>
<p>2. Add a single private constructor to the singleton class. The private modifier allows only 
"same class" access, which prohibits any attempts to instantiate the singleton class 
except for the attempt in step 1.
</p>
<p>3. A public factory method returns a copy of the singleton reference. This method is 
declared static to access the static field declared in step 1. Step 1 could use a public 
variable, eliminating the need for the factory method. Factory methods provide greater 
flexibility (for example, implementing a per-thread singleton solution) and are typically 
used in most singleton implementations.
</p>
<p>To obtain a singleton reference, call the getInstance method:
SingletonClass ref = SingletonClass.getInstance();
</p>
<p>Java SE 7 Programming   5 - 30
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Singleton Pattern
</p>
<p>The singleton design pattern details a class implementation 
that can be instantiated only once.
</p>
<p>public class SingletonClass {
</p>
<p>private static final SingletonClass instance =
</p>
<p>new SingletonClass();
</p>
<p>private SingletonClass() {}
</p>
<p>public static SingletonClass getInstance() {
</p>
<p>return instance;
</p>
<p>}   
</p>
<p>}
</p>
<p>1
</p>
<p>2
</p>
<p>3
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Reasons to Use Nested Classes
The following information is taken from 
http://download.oracle.com/javase/tutorial/java/javaOO/nested.html.
Logical Grouping of Classes
If a class is useful to only one other class, then it is logical to embed it in that class and keep 
the two together. Nesting such "helper classes" makes their package more streamlined.
Increased Encapsulation
Consider two top-level classes, A and B, where B needs access to members of A that would 
otherwise be declared private. By hiding class B within class A, A's members can be declared 
private and B can access them. In addition, B itself can be hidden from the outside world.
More Readable, Maintainable Code
Nesting small classes within top-level classes places the code closer to where it is used.
</p>
<p>Java SE 7 Programming   5 - 31
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Nested Classes
</p>
<p>A nested class is a class declared within the body of another 
class. Nested classes:
• Have multiple categories
</p>
<p>– Inner classes
— Member classes
— Local classes
— Anonymous classes
</p>
<p>– Static nested classes
• Are commonly used in applications with GUI elements
• Can limit utilization of a "helper class" to the enclosing top-
</p>
<p>level class
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Inner Classes Versus Static Nested Classes
An inner class is considered part of the outer class and inherits access to all the private 
members of the outer class. The example in the slide shows an inner class, which is a 
member class. Inner classes can also be declared inside a method block (local classes).
A static nested class is not an inner class, but its declaration appears similar with an 
additional static modifier on the nested class. Static nested classes can be instantiated 
before the enclosing outer class and, therefore, are denied access to all nonstatic members of 
the enclosing class.
</p>
<p>Java SE 7 Programming   5 - 32
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Inner Class: Example
</p>
<p>public class Car {
private boolean running = false;
private Engine engine = new Engine();
</p>
<p>private class Engine {
public void start() {
</p>
<p>running = true;
}
</p>
<p>}
</p>
<p>public void start() {
engine.start();
</p>
<p>}
}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Class with No Name
In the example in the slide, the java.lang.Object class is being subclassed, and it is that 
subclass that is being instantiated. When you compile an application with anonymous 
classes, a separate class file following a naming convention of Outer$1.class will be 
generated, where 1 is the index number of anonymous classes in an enclosing class and 
Outer is the name of the enclosing class.
Anonymous inner classes can also be local classes.
</p>
<p>Java SE 7 Programming   5 - 33
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Anonymous Inner Classes
</p>
<p>An anonymous class is used to define a class with no name.
</p>
<p>public class AnonymousExampleClass {
</p>
<p>public Object o = new Object() {
</p>
<p>@Override
</p>
<p>public String toString() {
</p>
<p>return "In an anonymous class method";
</p>
<p>}
</p>
<p>};  
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 34
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which of the following nested class types are inner classes?
a. anonymous
b. local
c. static
d. member
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 35
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Design general-purpose base classes by using abstract 
</p>
<p>classes
• Construct abstract Java classes and subclasses
• Model business problems by using the static and final
</p>
<p>keywords
• Implement the singleton design pattern
• Distinguish between top-level and nested classes
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 36
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 5-1 Overview:
Applying the Abstract Keyword
</p>
<p>This practice covers the following topics:
• Identifying potential problems that can be solved using 
</p>
<p>abstract classes
• Refactoring an existing Java application to use abstract 
</p>
<p>classes and methods
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 37
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 5-2 Overview:
Applying the Singleton Design Pattern
</p>
<p>This practice covers using the static and final keywords and 
refactoring an existing application to implement the singleton 
design pattern.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 38
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>(Optional) Practice 5-3 Overview:
Using Java Enumerations
</p>
<p>This practice covers taking an existing application and 
refactoring the code to use an enum.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   5 - 39
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>(Optional) Practice 5-4 Overview:
Recognizing Nested Classes
</p>
<p>This practice covers analyzing an existing Java application and 
identifying the number and types of classes present.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Inheritance with Java Interfaces
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to do the 
following:
• Model business problems by using interfaces
• Define a Java interface
• Choose between interface inheritance and class 
</p>
<p>inheritance
• Extend an interface
• Refactor code to implement the DAO pattern
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Abstraction
You just learned how to define abstract types by using classes. There are two ways to define type 
abstraction in Java: abstract classes and interfaces. By writing code to reference abstract types, 
you no longer depend on specific implementing classes. Defining these abstract types may seem 
like extra work in the beginning but can reduce refactoring at a later time if used appropriately.
</p>
<p>Java SE 7 Programming   6 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Implementation Substitution
</p>
<p>The ability to outline abstract types is a powerful feature of 
Java. Abstraction enables:
• Ease of maintenance
</p>
<p>– Classes with logic errors can be substituted with new and 
improved classes.
</p>
<p>• Implementation substitution
– The java.sql package outlines the methods used by 
</p>
<p>developers to communicate with databases, but the 
implementation is vendor-specific.
</p>
<p>• Division of labor
– Outlining the business API needed by an application’s UI 
</p>
<p>allows the UI and the business logic to be developed in 
tandem.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In Java, an interface outlines a contract for a class. The contract outlined by an interface 
mandates the methods that must be implemented in a class. Classes implementing the contract 
must fulfill the entire contract or be declared abstract.
</p>
<p>Java SE 7 Programming   6 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Java Interfaces
</p>
<p>Java interfaces are used to define abstract types. Interfaces:
• Are similar to abstract classes containing only public 
</p>
<p>abstract methods
• Outline methods that must be implemented by a class
</p>
<p>– Methods must not have an implementation {braces}.
• Can contain constant fields
• Can be used as a reference type
• Are an essential component of many design patterns
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Rules for Interfaces
Access Modifiers
All methods in an interface are public, even if you forget to declare them as public. You may 
not declare methods as private or protected in an interface. The contract that an interface 
outlines is a public API that must be provided by a class.
Abstract Modifier
Because all methods are implicitly abstract, it is redundant (but allowed) to declare a method 
abstract. Because all interface methods are abstract, you may not provide any method 
implementation, not even an empty set of braces.
Implements and Extends
A class can extend one parent class and then implement a comma-separated list of interfaces.
</p>
<p>Java SE 7 Programming   6 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Developing Java Interfaces
</p>
<p>Public, top-level interfaces are declared in their own .java file. 
You implement interfaces instead of extending them.
</p>
<p>public interface ElectronicDevice {
</p>
<p>public void turnOn();
</p>
<p>public void turnOff();   
</p>
<p>}
</p>
<p>public class Television implements ElectronicDevice {
</p>
<p>public void turnOn() { }
</p>
<p>public void turnOff() { }
</p>
<p>public void changeChannel(int channel) {}
</p>
<p>private void initializeScreen() {}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Only constant fields are permitted in an interface. When you declare a field in an interface, it is 
implicitly public, static, and final. You may redundantly specify these modifiers. Avoid 
grouping all the constant values for an application in a single interface; good design distributes the 
constant values of an application across many classes and interfaces. Creating monolithic classes 
or interfaces that contain large groupings of unrelated code does not follow best practices for 
object-oriented design.
</p>
<p>Java SE 7 Programming   6 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Constant Fields
</p>
<p>Interfaces can have constant fields.
</p>
<p>public interface ElectronicDevice {
</p>
<p>public static final String WARNING = 
</p>
<p>"Do not open, shock hazard";
</p>
<p>public void turnOn();
</p>
<p>public void turnOff();   
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>An interface-typed reference can be used only to reference an object that implements that 
interface. If an object has all the methods outlined in the interface but does not implement the 
interface, you may not use the interface as a reference type for that object. Interfaces implicitly 
include all the methods from java.lang.Object.
</p>
<p>Java SE 7 Programming   6 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Interface References
</p>
<p>You can use an interface as a reference type. When using an 
interface reference type, you must use only the methods 
outlined in the interface.
</p>
<p>ElectronicDevice ed = new Television();
</p>
<p>ed.turnOn();
</p>
<p>ed.turnOff();
</p>
<p>ed.changeChannel(2); // fails to compile
</p>
<p>String s = ed.toString();
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Previously, you used instanceof on class types. Any type that can be used as a reference can 
be used as an operand for the instanceof operator. In the slide, a Television implements 
ElectronicDevice. Therefore, a Television is an instance of a Television, an 
ElectronicDevice, and a java.lang.Object.
</p>
<p>Java SE 7 Programming   6 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>instanceof Operator
</p>
<p>You can use instanceof with interfaces.
Television t = new Television();
</p>
<p>if (t instanceof ElectronicDevice) { }
</p>
<p>Television is an instance of an ElectronicDevice.
</p>
<p>Implements
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>java.io.Serializable is a marker interface used by Java's I/O library to determine if an 
object can have its state serialized. When implementing Serializable, you are not required to 
provide method implementations. Testing (in the form of the instanceof operator) for the 
serializability of an object is built into the standard I/O libraries. You use this interface in the lesson 
titled “Java I/O Fundamentals.”
</p>
<p>Java SE 7 Programming   6 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Marker Interfaces
</p>
<p>• Marker interfaces define a type but do not outline any 
methods that must be implemented by a class.
</p>
<p>public class Person implements java.io.Serializable { }
</p>
<p>• The only reason these type of interfaces exist is type 
checking.
</p>
<p>Person p = new Person();
</p>
<p>if (p instanceof Serializable) {
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Casting Guidelines
Just as you do when casting to class types, if you cast to a type that is invalid for that object, your 
application generates an exception and is even likely to crash. To verify that a cast will succeed, 
you should use an instanceof test.
The example in the slide shows poor design because the turnObjectOn() method operates 
only on ElectronicDevices. Using instanceof and casting adds overhead at run time. When 
possible, use a compile-time test by rewriting the method as:
</p>
<p>public static void turnObjectOn(ElectronicDevice e) {
</p>
<p>e.turnOn();        
</p>
<p>}
</p>
<p>Java SE 7 Programming   6 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Casting to Interface Types
</p>
<p>You can cast to an interface type.
</p>
<p>public static void turnObjectOn(Object o) {
</p>
<p>if (o instanceof ElectronicDevice) {
</p>
<p>ElectronicDevice e = (ElectronicDevice)o;
</p>
<p>e.turnOn();
</p>
<p>}        
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>When creating references, you should use the most generic type possible. This means that, for the 
object you are instantiating, you should declare the reference to be of an interface type or of a 
parent class type. By doing this, all usage of the reference is not tied to a particular implementing 
class and, if need be, you could use a different implementing class. By using an interface that 
several classes implement as the reference type, you have the freedom to change the 
implementation without affecting your code. An EmployeeDAOMemoryImpl typed reference could 
be used to invoke a method that appears only in the EmployeeDAOMemoryImpl class.
References typed to a specific class cause your code to be more tightly coupled to that class and 
potentially cause greater refactoring of your code when changing implementations.
</p>
<p>Java SE 7 Programming   6 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using Generic Reference Types
</p>
<p>• Use the most generic type of reference wherever possible:
</p>
<p>EmployeeDAO dao = new EmployeeDAOMemoryImpl();
</p>
<p>dao.delete(1);
</p>
<p>• By using an interface reference type, you can use a 
different implementing class without running the risk of 
breaking subsequent lines of code:
</p>
<p>EmployeeDAOMemoryImpl dao = new EmployeeDAOMemoryImpl(); 
dao.delete(1);
</p>
<p>It is possible that you could be using 
EmployeeDAOMemoryImpl only methods here.
</p>
<p>EmployeeDAOMemoryImpl implements 
EmployeeDAO
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Extends First
If you use both extends and implements, extends must come first.
</p>
<p>Java SE 7 Programming   6 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Implementing and Extending
</p>
<p>• Classes can extend a parent class and implement an 
interface:
</p>
<p>public class AmphibiousCar extends BasicCar implements 
MotorizedBoat { }
</p>
<p>• You can also implement multiple interfaces:
</p>
<p>public class AmphibiousCar extends BasicCar implements 
MotorizedBoat, java.io.Serializable { }
</p>
<p>Use a comma to separate your list 
of interfaces.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Extending Interfaces
</p>
<p>• Interfaces can extend interfaces:
</p>
<p>public interface Boat { }
</p>
<p>public interface MotorizedBoat extends Boat { }
</p>
<p>• By implementing MotorizedBoat, the AmphibiousCar
class must fulfill the contract outlined by both 
MotorizedBoat and Boat:
</p>
<p>public class AmphibiousCar extends BasicCar implements 
MotorizedBoat, java.io.Serializable { }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Interface Inheritances
Interfaces are used for a form of inheritance that is referred to as interface inheritance. Java allows 
multiple interface inheritance but only single class inheritance.
Extending an Implementing Class
If you write a class that extends a class that implements an interface, the class you authored also 
implements the interface. For example, AmphibiousCar extends BasicCar. BasicCar
implements Car; therefore, AmphibiousCar also implements Car.
Interfaces Extending Interfaces
An interface can extend another interface. For example, the interface MotorizedBoat can 
extend the Boat interface. If the AmphibiousCar class implements MotorizedBoat, then it 
must implement all methods from Boat and MotorizedBoat.
Duplicate Methods
When you have a class that implements multiple interfaces, directly or indirectly, the same method 
signature may appear in different implemented interfaces. If the signatures are the same, there is 
no conflict and only one implementation is required.
</p>
<p>Java SE 7 Programming   6 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Interfaces in Inheritance Hierarchies
</p>
<p>Extends Implements
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>A class can implement multiple interfaces.
a. True
b. False
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Object-Oriented Design Principles
“Program to an interface, not an implementation” is a practice that was popularized in the book 
Design Patterns: Elements of Reusable Object-Oriented Software. 
You can learn more about object-oriented design principles and design patterns in the Java 
Design Patterns  course.
</p>
<p>Java SE 7 Programming   6 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Design Patterns and Interfaces
</p>
<p>• One of the principles of object-oriented design is to:
“Program to an interface, not an implementation.”
</p>
<p>• This is a common theme in many design patterns. This 
principle plays a role in:
– The DAO design pattern 
– The Factory design pattern
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Why Separate Business and Persistence Code?
Just as the required functionality of an application will influence the design of your classes, so will 
other concerns. A desire for ease of maintenance and for the ability to enhance an application also 
influences its design. Modular code that is separated by functionality is easier to update and 
maintain.
By separating business and persistence logic, applications become easier to implement and 
maintain at the expense of additional classes and interfaces. Often these two types of logic have 
different maintenance cycles. For example, the persistence logic might need to be modified if the 
database used by the application was migrated from MySQL to Oracle 11g. 
If you create interfaces for the classes containing the persistence logic, it becomes easier for you 
to replace your persistence implementation. 
</p>
<p>Java SE 7 Programming   6 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>DAO Pattern
</p>
<p>The Data Access Object (DAO) pattern is used when creating 
an application that must persist information. The DAO pattern:
• Separates the problem domain from the persistence 
</p>
<p>mechanism
• Uses an interface to define the methods used for 
</p>
<p>persistence. An interface allows the persistence 
implementation to be replaced with:
– Memory-based DAOs as a temporary solution
– File-based DAOs for an initial release
– JDBC-based DAOs to support database persistence
– Java Persistence API (JPA)–based DAOs to support 
</p>
<p>database persistence
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Single-Responsibility Principle
The Employee class shown in the slide has methods that focus on two different principles or 
concerns. One set of methods focuses on manipulating the representation of a person, and the 
other deals with persisting Employee objects. Because these two sets of responsibilities may be 
modified at different points in the lifetime of your applications, it makes sense to split them up into 
different classes.
</p>
<p>Java SE 7 Programming   6 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Before the DAO Pattern
</p>
<p>Notice the persistence methods mixed in with the business 
methods.
</p>
<p>Before the DAO pattern
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>DAO Implementations
If you think that you might need to change your DAO implementation at a later time to use a 
different persistence mechanism, it is best to use an interface to define the contract that all DAO 
implementations must meet.
Your DAO interfaces outline methods to create, read, update, and delete data, although the 
method names can vary. When you first implement the DAO pattern, you will not see the benefit 
immediately. The payoff comes later, when you start modifying or replacing code. In the lesson 
titled “Building Database Applications with JDBC,” replacing the memory-based DAO with file- and 
database-enabled DAOs has been discussed.
</p>
<p>Java SE 7 Programming   6 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>After the DAO Pattern
</p>
<p>The DAO pattern moves the persistence logic out of the 
domain classes and into separate classes.
</p>
<p>After refactoring to the DAO pattern
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>The Need for the Factory Pattern
</p>
<p>The DAO pattern depends on using interfaces to define an 
abstraction. Using a DAO implementation’s constructor ties you 
to a specific implementation.
</p>
<p>EmployeeDAO dao = new EmployeeDAOMemoryImpl();
</p>
<p>This constructor invocation is 
tied to an implementation and 
</p>
<p>will appear in many places 
throughout an application.
</p>
<p>With use of an interface 
type, any subsequent 
lines are not tied to a 
</p>
<p>single implementation.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This pattern eliminates direct constructor calls in favor of invoking a method. A factory is often 
used when implementing the DAO pattern.
In the example in the slide, you have no idea what type of persistence mechanism is used by 
EmployeeDAO because it is just an interface. The factory could return a DAO implementation that 
uses files or a database to store and retrieve data. As a developer, you want to know what type of 
persistence is being used because it factors into the performance and reliability of your 
application. But you do not want the majority of the code you write to be tightly coupled with the 
type of persistence.
</p>
<p>Java SE 7 Programming   6 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using the Factory Pattern
</p>
<p>Using a factory prevents your application from being tightly 
coupled to a specific DAO implementation.
</p>
<p>EmployeeDAOFactory factory = new EmployeeDAOFactory();
</p>
<p>EmployeeDAO dao = factory.createEmployeeDAO();
</p>
<p>The EmployeeDAO
implementation is hidden.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>For simplicity, this factory hardcodes the name of a concrete class to instantiate. You could 
enhance this factory by putting the class name in an external source such as a text file and use 
the java.lang.Class class to instantiate the concrete subclass. A basic example of using the 
java.lang.Class follows:
</p>
<p>String name = "com.example.dao.EmployeeDAOMemoryImpl";
</p>
<p>Class clazz = Class.forName(name);
</p>
<p>EmployeDAO dao = (EmployeeDAO)clazz.newInstance();
</p>
<p>Java SE 7 Programming   6 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>The Factory
</p>
<p>The implementation of the factory is the only point in the
application that should depend on concrete DAO classes.
</p>
<p>public class EmployeeDAOFactory {
</p>
<p>public EmployeeDAO createEmployeeDAO() {
</p>
<p>return new EmployeeDAOMemoryImpl();
</p>
<p>}
</p>
<p>}
</p>
<p>Returns an interface typed 
reference
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>The DAO and Factory Together
</p>
<p>Clients depending only on abstract DAOs
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>A typical singleton implementation contains a factory method.
a. True
b. False
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copying and pasting code is not something that must always be avoided. If duplicated code 
serves as a starting point and is heavily modified, that may be an acceptable situation for you to 
copy and paste lines of code. You should be aware of how much copying and pasting is occurring 
in a project. Besides performing manual code audits, there are tools you can use to detect 
duplicated code. For one such example, refer to http://pmd.sourceforge.net/cpd.html.
</p>
<p>Java SE 7 Programming   6 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Code Reuse
</p>
<p>Code duplication (copy and paste) can lead to maintenance 
problems. You do not want to fix the same bug multiple times.
• “Don’t repeat yourself!” (DRY principle)
• Reuse code in a good way:
</p>
<p>– Refactor commonly used routines into libraries.
– Move the behavior shared by sibling classes into their parent 
</p>
<p>class.
– Create new combinations of behaviors by combining multiple 
</p>
<p>types of objects together (composition).
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Limitations with Inheritance
Java supports only single class inheritance, which eliminates the possibility of inheriting different 
implementations of a method with the same signature. Multiple interface inheritance does not pose 
the same problem as class inheritance because there can be no conflicting method 
implementations in interfaces.
</p>
<p>Java SE 7 Programming   6 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Design Difficulties
</p>
<p>Class inheritance allows for code reuse but is not very modular
• How do you create a SpyCarWithSunRoof?
</p>
<p>Method implementations located across different classes
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Delegation
Method delegation and method forwarding are two terms that are often used interchangeably. 
Method forwarding is when you write a method that does nothing except pass execution over to 
another method. In some cases, delegation may imply more than simple forwarding. For more on 
the difference between the two, refer to page 20 of the book Design Patterns: Elements of 
Reusable Object-Oriented Software.
</p>
<p>Java SE 7 Programming   6 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Composition
</p>
<p>Object composition allows you to create more complex objects. 
To implement composition, you:
1. Create a class with references to other classes.
2. Add same signature methods that forward to the 
</p>
<p>referenced objects.
</p>
<p>Combining multiple classes' methods
through composition and forwarding
</p>
<p>composition
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>IDE Wizards Make Implementing Composition Easy
To implement composition with the NetBeans IDE, use the Insert Code tool as follows: 
</p>
<p>1. Right-click within the braces of the complex class and choose "Insert Code.” 
2. Select "Delegate Method.”
</p>
<p>The Generate Delegate Methods dialog box appears.
3. Select the method calls that you want to forward. 
</p>
<p>The methods are inserted for you. 
Repeat these steps for each delegate class.
</p>
<p>Java SE 7 Programming   6 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Composition Implementation
</p>
<p>public class SpyCarWithSunRoof {  
</p>
<p>private BasicCar car = new BasicCar();
</p>
<p>private SpyCarAddon spyAddon = new SpyCarAddon();
</p>
<p>private SunRoofAddon roofAddon = new SunRoofAddon();
</p>
<p>public void start() {
</p>
<p>car.start();
</p>
<p>}
</p>
<p>// other forwarded methods
</p>
<p>}
</p>
<p>Method 
forwarding
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Code Reuse
The ability to use the addCar method for any type of Car, no matter how complex, is another form 
of code reuse. The following cannot be said currently:
addCar(new SpyCarWithSunRoof());
</p>
<p>Java SE 7 Programming   6 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Polymorphism and Composition
</p>
<p>Polymorphism should enable us to pass any type of Car to the 
addCar method. Composition does not enable polymorphism 
unless…
</p>
<p>A complex car object that cannot be passed 
to a method expecting a simple car
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Each delegate class that you use in a composition should have an interface defined. When 
creating the composing class, you declare that it implements all of the delegate interface types. 
By doing this, you create an object that is a composition of other objects and has many types. 
Now we can say:
addCar(new SpyCarWithSunRoof());
</p>
<p>Java SE 7 Programming   6 - 30
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Polymorphism and Composition
</p>
<p>Use interfaces for all delegate classes to support polymorphism.
</p>
<p>Composition with interfaces to 
support polymorphism
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 31
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Method delegation is required to create complex objects using:
a. Polymorphism
b. Composition
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 32
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Model business problems by using interfaces
• Define a Java interface
• Choose between interface inheritance and class 
</p>
<p>inheritance
• Extend an interface
• Refactor code to implement the DAO pattern
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 33
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 6-1 Overview: 
Implementing an Interface
</p>
<p>This practice covers the following topics:
• Writing an interface
• Implementing an interface
• Creating references of an interface type
• Casting to interface types
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 34
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 6-2 Overview: 
Applying the DAO Pattern
</p>
<p>This practice covers the following topics:
• Rewriting an existing domain object with a memory-based 
</p>
<p>persistence implementation using the DAO pattern
• Leveraging an abstract factory to avoid depending on 
</p>
<p>concrete implementations
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   6 - 35
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>(Optional) Practice 6-3 Overview: 
Implementing Composition
</p>
<p>This practice covers the following topics:
• Rewriting an existing application to better support code 
</p>
<p>reuse through composition
• Using interfaces to enable polymorphism
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generics and Collections
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to:
• Create a custom generic class
• Use the type inference diamond to create an object
• Create a collection without using generics
• Create a collection by using generics
• Implement an ArrayList
• Implement a Set
• Implement a HashMap
• Implement a stack by using a deque
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generics
</p>
<p>• Provide flexible type safety to your code
• Move many common errors from runtime to compile time
• Provide cleaner, easier-to-write code
• Reduce the need for casting with collections
• Are used heavily in the Java Collections API
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The two examples in the slide show very simple caching classes. Even though each class is very 
simple, a separate class is required for any object type.
</p>
<p>Java SE 7 Programming   7 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Simple Cache Class Without Generics
public class CacheString { 
</p>
<p>private String message = "";
</p>
<p>public void add(String message){
</p>
<p>this.message = message;
</p>
<p>}
</p>
<p>public String get(){
</p>
<p>return this.message;
</p>
<p>}  
</p>
<p>}
</p>
<p>public class CacheShirt {
</p>
<p>private Shirt shirt;
</p>
<p>public void add(Shirt shirt){
</p>
<p>this.shirt = shirt;
</p>
<p>}
</p>
<p>public Shirt get(){
</p>
<p>return this.shirt;
</p>
<p>}  
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>To create a generic version of the CacheAny class, a variable named T is added to the class 
definition surrounded by angle brackets. In this case, T stands for “type” and can represent any 
type. As the example shows, the code has changed to use t instead of a specific type information. 
This change allows the CacheAny class to store any type of object.
T was chosen not by accident but by convention. A number of letters are commonly used with 
generics. 
Note: You can use any identifier you want. The following values are merely strongly suggested.
Here are the conventions:
</p>
<p>• T: Type
• E: Element
• K: Key
• V: Value
• S, U: Used if there are second types, third types, or more
</p>
<p>Java SE 7 Programming   7 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generic Cache Class
</p>
<p>1 public class CacheAny &lt;T&gt;{
</p>
<p>2
</p>
<p>3 private T t;
</p>
<p>4
</p>
<p>5 public void add(T t){
</p>
<p>6 this.t = t;
</p>
<p>7 }
</p>
<p>8
</p>
<p>9 public T get(){
</p>
<p>10 return this.t;
</p>
<p>11 }  
</p>
<p>12 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Note how the one generic version of the class can replace any number of type-specific caching 
classes. The add() and get() functions work exactly the same way. In fact, if the myMessage
declaration is changed to generic, no changes need to be made to the remaining code.
The example code can be found in the Generics project in the TestCacheAny.java file.
</p>
<p>Java SE 7 Programming   7 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generics in Action
</p>
<p>Compare the type-restricted objects to their generic 
alternatives.
</p>
<p>1 public static void main(String args[]){
</p>
<p>2 CacheString myMessage = new CacheString(); // Type
</p>
<p>3 CacheShirt myShirt = new CacheShirt();     // Type
</p>
<p>4
</p>
<p>5 //Generics
</p>
<p>6 CacheAny&lt;String&gt; myGenericMessage = new CacheAny&lt;String&gt;(); 
</p>
<p>7 CacheAny&lt;Shirt&gt; myGenericShirt = new CacheAny&lt;Shirt&gt;(); 
</p>
<p>8
</p>
<p>9 myMessage.add("Save this for me"); // Type
</p>
<p>10 myGenericMessage.add("Save this for me"); // Generic       
</p>
<p>11
</p>
<p>12 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The type inference diamond is a new feature in JDK 7. In the generic code, notice how the 
right-side type definition is always equivalent to the left-side type definition. In JDK 7, you can use 
the diamond to indicate that the right type definition is equivalent to the left. This helps to avoid 
typing redundant information over and over again. 
Example: TestCacheAnyDiamond.java
Note: In a way, it works in an opposite way from a “normal” Java type assignment. For example, 
Employee emp = new Manager(); makes emp object an instance of Manager. 
But in the case of generics:
ArrayList&lt;Manager&gt; managementTeam = new ArrayList&lt;&gt;();
</p>
<p>It is the left side of the expression (rather than the right side) that determines the type.
</p>
<p>Java SE 7 Programming   7 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generics with Type Inference Diamond
</p>
<p>• Syntax
– There is no need to repeat types on the right side of the 
</p>
<p>statement.
– Angle brackets indicate that type parameters are mirrored.
</p>
<p>• Simplifies generic declarations
• Saves typing
</p>
<p>//Generics
</p>
<p>CacheAny&lt;String&gt; myMessage = new CacheAny&lt;&gt;(); 
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which of the following is not a conventional abbreviation for 
use with generics?
a. T: Table
b. E: Element
c. K: Key
d. V: Value
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A collection is a single object that manages a group of objects. Objects in the collection are called 
elements. Various collection types implement standard data structures including stacks, queues, 
dynamic arrays, and hashes. All the collection objects have been optimized for use in Java 
applications.
Note: The Collections classes are all stored in the java.util package. The import statements 
are not shown in the following examples, but the import statements are required for each 
collection type:
• import java.util.List;
• import java.util.ArrayList;
• import java.util.Map; 
</p>
<p>Java SE 7 Programming   7 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Collections
</p>
<p>• A collection is a single object designed to manage a group 
of objects.
– Objects in a collection are called elements.
– Primitives are not allowed in a collection.
</p>
<p>• Various collection types implement many common data 
structures:
– Stack, queue, dynamic array, hash
</p>
<p>• The Collections API relies heavily
on generics for its implementation.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The diagram in the slide shows all the collection types that descend from Collection. Some 
sample methods are provided for both Collection and List. Note the use of generics. 
Characteristics of Implementation Classes
• HashSet: A collection of elements that contains no duplicate elements
• TreeSet: A sorted collection of elements that contains no duplicate elements
• ArrayList: A dynamic array implementation 
• Deque: A collection that can be used to implement a stack or a queue
</p>
<p>Note: The Map interface is a separate inheritance tree and is discussed later in the lesson.
</p>
<p>Java SE 7 Programming   7 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Collection Types
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The List interface is the basis for all Collections classes that exhibit list behavior.
</p>
<p>Java SE 7 Programming   7 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>List Interface
</p>
<p>• List is an interface that defines generic list behavior.
– An ordered collection of elements
</p>
<p>• List behaviors include:
– Adding elements at a specific index
– Adding elements to the end of the list
– Getting an element based on an index
– Removing an element based on an index
– Overwriting an element based on an index
– Getting the size of the list
</p>
<p>• Use List as a reference type to hide implementation 
details.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>An ArrayList implements a List collection. The implementation exhibits characteristics of a 
dynamically growing array. A “to-do list” application is a good example of an application that can 
benefit from an ArrayList.
</p>
<p>Java SE 7 Programming   7 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>ArrayList Implementation Class
</p>
<p>• Is a dynamically growable array
– The list automatically grows if elements exceed initial size.
</p>
<p>• Has a numeric index
– Elements are accessed by index.
– Elements can be inserted based on index.
– Elements can be overwritten.
</p>
<p>• Allows duplicate items
</p>
<p>List&lt;Integer&gt; partList = new ArrayList&lt;&gt;(3);
</p>
<p>partList.add(new Integer(1111));
</p>
<p>partList.add(new Integer(2222));
</p>
<p>partList.add(new Integer(3333));
</p>
<p>partList.add(new Integer(4444)); // ArrayList auto grows
</p>
<p>System.out.println("First Part: " + partList.get(0)); // First item
</p>
<p>partList.add(0, new Integer(5555)); // Insert an item by index
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In the example in the slide, a part number list is created using an ArrayList. Using syntax prior 
to Java version 1.5, there is no type definition. So any type can be added to the list as shown on 
line 8. So it is up to the programmer to know what objects are in the list and in what order. If an 
assumption were made that the list was only for Integer objects, a runtime error would occur on 
line 12. 
On lines 10–16, with a non-generic collection, an Iterator is used to iterate through the list of 
items. Notice that a lot of casting is required to get the objects back out of the list so you can print 
the data. 
In the end, there is a lot of needless “syntactic sugar” (extra code) working with collections in this 
way.
If the line that adds the String to the ArrayList is commented out, the program produces the 
following output:
Part number: 1111
</p>
<p>Part number: 2222
</p>
<p>Part number: 3333
</p>
<p>Java SE 7 Programming   7 - 13
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>1 public class OldStyleArrayList {
</p>
<p>2 public static void main(String args[]){  
</p>
<p>3 List partList = new ArrayList(3);
</p>
<p>4
</p>
<p>5 partList.add(new Integer(1111));
</p>
<p>6 partList.add(new Integer(2222));
</p>
<p>7 partList.add(new Integer(3333));
</p>
<p>8 partList.add("Oops a string!");
</p>
<p>9
</p>
<p>10 Iterator elements = partList.iterator();    
</p>
<p>11 while (elements.hasNext()) {
</p>
<p>12 Integer partNumberObject = (Integer)(elements.next()); // error?
</p>
<p>13 int partNumber = partNumberObject.intValue();
</p>
<p>14
</p>
<p>15 System.out.println("Part number: " + partNumber);
</p>
<p>16 }       
</p>
<p>17 } 
</p>
<p>18 }
</p>
<p>ArrayList Without Generics
</p>
<p>Java example using 
syntax prior to
</p>
<p>Java 1.5.
</p>
<p>Runtime error: 
ClassCastException
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>With generics, things are much simpler. When the ArrayList is initialized on line 3, any attempt 
to add an invalid value (line 8) results in a compile-time error. 
Note: On line 3, the ArrayList is assigned to a List type. Using this style enables you to swap 
out the List implementation without changing other code.
</p>
<p>Java SE 7 Programming   7 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>1 public class GenericArrayList {  
</p>
<p>2 public static void main(String args[]) {
</p>
<p>3 List&lt;Integer&gt; partList = new ArrayList&lt;&gt;(3);
</p>
<p>4
</p>
<p>5 partList.add(new Integer(1111));
</p>
<p>6 partList.add(new Integer(2222));
</p>
<p>7 partList.add(new Integer(3333));
</p>
<p>8 partList.add("Bad Data");  // compile error now 
</p>
<p>9
</p>
<p>10 Iterator&lt;Integer&gt; elements = partList.iterator();
</p>
<p>11 while (elements.hasNext()) {
</p>
<p>12 Integer partNumberObject = elements.next();
</p>
<p>13 int partNumber = partNumberObject.intValue();
</p>
<p>14
</p>
<p>15 System.out.println("Part number: " + partNumber);
</p>
<p>16 }
</p>
<p>17 }
</p>
<p>18 }
</p>
<p>Generic ArrayList
</p>
<p>Java example using 
SE 7 syntax.
</p>
<p>No cast required.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Using the for-each loop is much easier and provides much cleaner code. No casts are done 
because of the autounboxing feature of Java.
</p>
<p>Java SE 7 Programming   7 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Generic ArrayList: Iteration and Boxing
</p>
<p>• The enhanced for loop, or for-each loop, provides 
cleaner code.
</p>
<p>• No casting is done because of autoboxing and unboxing.
</p>
<p>for (Integer partNumberObj:partList){
</p>
<p>int partNumber = partNumberObj; // Demos auto unboxing
</p>
<p>System.out.println("Part number: " + partNumber);  
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Lines 9 and 10 show a traditional method for moving between objects and primitives. Lines 12 and 
13 show boxing and unboxing.
Autoboxing and Unboxing
Autoboxing and unboxing are Java language features that enable you to make sensible 
assignments without formal casting syntax. Java provides the casts for you at compile time.
Note: Be careful when using autoboxing in a loop. There is a performance cost to using this 
feature.
</p>
<p>Java SE 7 Programming   7 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Autoboxing and Unboxing
</p>
<p>• Simplifies syntax
• Produces cleaner, easier-to-read code
</p>
<p>1 public class AutoBox {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 Integer intObject = new Integer(1);
</p>
<p>4 int intPrimitive = 2;
</p>
<p>5
</p>
<p>6 Integer tempInteger;
</p>
<p>7 int tempPrimitive;
</p>
<p>8
</p>
<p>9 tempInteger = new Integer(intPrimitive);
</p>
<p>10 tempPrimitive = intObject.intValue();
</p>
<p>11
</p>
<p>12 tempInteger = intPrimitive; // Auto box
</p>
<p>13 tempPrimitive = intObject;  // Auto unbox       
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Assuming a valid Employee class, and given this fragment:
1 List&lt;Object&gt; staff = new ArrayList&lt;&gt;(3);
</p>
<p>2 staff.add(new Employee(101, "Bob Andrews"));
</p>
<p>3 staff.add(new Employee(102, "Fred Smith"));
</p>
<p>4 staff.add(new Employee(103, "Susan Newman"));
</p>
<p>5 staff.add(3, new Employee(104, "Tim Downs"));
</p>
<p>6 Iterator&lt;Employee&gt; elements = staff.iterator();
</p>
<p>7 while (elements.hasNext()) 
</p>
<p>8 System.out.println(elements.next().getName());    
</p>
<p>What change is required to allow this code to compile?
a. Line 1: The (3) needs to be (4)
b. Line 8: Need to cast elements.next() to Employee before 
</p>
<p>invoking getName()
c. Line 1: Object needs to be Employee 
d. Line 5: The 3 needs to be 4
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>As an example, a set can be used to track a list of unique part numbers.
</p>
<p>Java SE 7 Programming   7 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Set Interface
</p>
<p>• A set is a list that contains only unique elements.
• A set has no index.
• Duplicate elements are not allowed in a set.
• You can iterate through elements to access them.
• TreeSet provides sorted implementation.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A set is a collection of unique elements. This example uses a TreeSet, which sorts the items in 
the set. If the program is run, the output is as follows:
Item: one
</p>
<p>Item: three
</p>
<p>Item: two
</p>
<p>Java SE 7 Programming   7 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Set Interface: Example
</p>
<p>A set is a collection of unique elements.
</p>
<p>1 public class SetExample {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 Set&lt;String&gt; set = new TreeSet&lt;&gt;();
</p>
<p>4
</p>
<p>5 set.add("one");
</p>
<p>6 set.add("two");
</p>
<p>7 set.add("three");
</p>
<p>8 set.add("three"); // not added, only unique
</p>
<p>9
</p>
<p>10 for (String item:set){
</p>
<p>11 System.out.println("Item: " + item);
</p>
<p>12 }    
</p>
<p>13 }
</p>
<p>14 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Map is good for tracking things like part lists and their descriptions (as shown in the slide).
</p>
<p>Java SE 7 Programming   7 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Map Interface
</p>
<p>• A collection that stores multiple key-value pairs
– Key: Unique identifier for each element in a collection
– Value: A value stored in the element associated with the key
</p>
<p>• Called “associative arrays” in other languages
</p>
<p>Key Value
</p>
<p>101 Blue Shirt
</p>
<p>102 Black Shirt
</p>
<p>103 Gray Shirt
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Map interface does not extend the Collection interface because it represents mappings 
and not a collection of objects. Some of the key implementation classes include:
</p>
<p>• TreeMap: A map where the keys are automatically sorted
• HashTable: A classic associative array implementation with keys and values. HashTable
</p>
<p>is synchronized.
• HashMap: An implementation just like HashTable except that it accepts null keys and 
</p>
<p>values. Also, it is not synchronized.
</p>
<p>Java SE 7 Programming   7 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Map Types
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The example shows how to create a Map and perform standard operations on it. The output from 
the program is:
=== Part List ===
</p>
<p>Part#: S001 Blue Polo Shirt
</p>
<p>Part#: S002 Black T-Shirt
</p>
<p>Part#: H001 Duke Hat
</p>
<p>Java SE 7 Programming   7 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Map Interface: Example
</p>
<p>1 public class MapExample {
</p>
<p>2 public static void main(String[] args){      
</p>
<p>3 Map &lt;String, String&gt; partList = new TreeMap&lt;&gt;();
</p>
<p>4 partList.put(“S001", "Blue Polo Shirt");
</p>
<p>5 partList.put(“S002", "Black Polo Shirt");
</p>
<p>6 partList.put(“H001", "Duke Hat");
</p>
<p>7
</p>
<p>8 partList.put(“S002", "Black T-Shirt"); // Overwrite value
</p>
<p>9 Set&lt;String&gt; keys = partList.keySet();
</p>
<p>10
</p>
<p>11 System.out.println("=== Part List ===");
</p>
<p>12 for (String key:keys){
</p>
<p>13 System.out.println("Part#: " + key + " " + 
</p>
<p>14 partList.get(key));
</p>
<p>15 }
</p>
<p>16 }
</p>
<p>17 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Deque is a child interface of Collection (just like Set and List).
A queue is often used to track asynchronous message requests so they can be processed in 
order. A stack can be very useful for traversing a directory tree or similar structures.
</p>
<p>Java SE 7 Programming   7 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Deque Interface
</p>
<p>A collection that can be used as a stack or a queue
• Means “double-ended queue” (and is pronounced “deck”)
• A queue provides FIFO (first in, first out) operations
</p>
<p>– add(e) and remove() methods
• A stack provides LIFO (last in, first out) operations
</p>
<p>– push(e) and pop() methods
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A deque (pronounced “deck”) is a “doubled-ended queue.” Essentially this means that a deque 
can be used as a queue (first in, first out [FIFO] operations) or as a stack (last in, 
first out [LIFO] operations).  
</p>
<p>Java SE 7 Programming   7 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Stack with Deque: Example
</p>
<p>1 public class TestStack {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 Deque&lt;String&gt; stack = new ArrayDeque&lt;&gt;();
</p>
<p>4 stack.push("one");
</p>
<p>5 stack.push("two");
</p>
<p>6 stack.push("three");
</p>
<p>7
</p>
<p>8 int size = stack.size() - 1;
</p>
<p>9 while (size &gt;= 0 ) {
</p>
<p>10 System.out.println(stack.pop());
</p>
<p>11 size--;
</p>
<p>12 }        
</p>
<p>13 }
</p>
<p>14 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Collections API provides two interfaces for ordering elements: Comparable and 
Comparator. 
The Comparable interface is implemented in a class and provides a single sorting option for the 
class. 
The Comparator interface enables you to create multiple sorting options. You plug in the 
designed option whenever you want. 
Both interfaces can be used with sorted collections, such as TreeSet and TreeMap.
</p>
<p>Java SE 7 Programming   7 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Ordering Collections
</p>
<p>• The Comparable and Comparator interfaces are used to 
sort collections.
– Both are implemented using generics.
</p>
<p>• Using the Comparable interface:
– Overrides the compareTo method
– Provides only one sort option
</p>
<p>• Using the Comparator interface:
– Is implemented by using the compare method
– Enables you to create multiple Comparator classes
– Enables you to create and use numerous sorting options
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The slide shows how the ComparableStudent class relates to the Comparable interface and 
TreeSet.
</p>
<p>Java SE 7 Programming   7 - 26
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Comparable Interface
</p>
<p>Using the Comparable interface:
• Overrides the compareTo method
• Provides only one sort option
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>This example in the slide implements the Comparable interface and its compareTo method. 
Notice that because the interface is designed using generics, the angle brackets define the class 
type that is passed into the compareTo method. The if statements are included to demonstrate 
the comparisons that take place. You can also merely return a result. 
The returned numbers have the following meaning.
• Negative number: s comes before the current element.
• Positive number: s comes after the current element.
• Zero: s is equal to the current element.
</p>
<p>In cases where the collection contains equivalent values, replace the code that returns zero with 
additional code that returns a negative or positive number.
</p>
<p>Java SE 7 Programming   7 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Comparable: Example
</p>
<p>1 public class ComparableStudent implements Comparable&lt;ComparableStudent&gt;{  
</p>
<p>2 private String name; private long id = 0; private double gpa = 0.0;
</p>
<p>3
</p>
<p>4 public ComparableStudent(String name, long id, double gpa){
</p>
<p>5 // Additional code here
</p>
<p>6 }
</p>
<p>7 public String getName(){ return this.name; }
</p>
<p>8 // Additional code here
</p>
<p>9
</p>
<p>10 public int compareTo(ComparableStudent s){
</p>
<p>11 int result = this.name.compareTo(s.getName());
</p>
<p>12 if (result &gt; 0) { return 1; } 
</p>
<p>13 else if (result &lt; 0){ return -1; } 
</p>
<p>14 else { return 0; }
</p>
<p>15 }
</p>
<p>16 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In the example in the slide, an ArrayList of ComparableStudent elements is created. After 
the list is initialized, it is sorted using the Comparable interface. The output of the program is as 
follows:
Name: George Washington  ID: 3333  GPA:3.4
</p>
<p>Name: John Adams  ID: 2222  GPA:3.9
</p>
<p>Name: Thomas Jefferson  ID: 1111  GPA:3.8 
</p>
<p>Note: The ComparableStudent class has overridden the toString() method.
</p>
<p>Java SE 7 Programming   7 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>public class TestComparable {
</p>
<p>public static void main(String[] args){
</p>
<p>Set&lt;ComparableStudent&gt; studentList = new TreeSet&lt;&gt;();
</p>
<p>studentList.add(new ComparableStudent("Thomas Jefferson", 1111, 3.8));
</p>
<p>studentList.add(new ComparableStudent("John Adams", 2222, 3.9));
</p>
<p>studentList.add(new ComparableStudent("George Washington", 3333, 3.4));
</p>
<p>for(ComparableStudent student:studentList){
</p>
<p>System.out.println(student);
</p>
<p>}
</p>
<p>}
</p>
<p>}
</p>
<p>Comparable Test: Example
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The slide shows two Comparator classes that can be used with the Student class. The 
example in the next slide shows how to use Comparator with an unsorted interface like 
ArrayList by using the Collections utility class.
</p>
<p>Java SE 7 Programming   7 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Comparator Interface
</p>
<p>Using the Comparator interface:
• Is implemented by using the compare method
• Enables you to create multiple Comparator classes
• Enables you to create and use numerous sorting options
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The example in the slide shows the Comparator classes that are created to sort based on Name 
and GPA. For the name comparison, the if statements have been simplified. 
</p>
<p>Java SE 7 Programming   7 - 30
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Comparator: Example
</p>
<p>public class StudentSortName implements Comparator&lt;Student&gt;{
</p>
<p>public int compare(Student s1, Student s2){
</p>
<p>int result = s1.getName().compareTo(s2.getName());
</p>
<p>if (result != 0) { return result; }
</p>
<p>else { 
</p>
<p>return 0;  // Or do more comparing
</p>
<p>} 
</p>
<p>}
</p>
<p>}
</p>
<p>public class StudentSortGpa implements Comparator&lt;Student&gt;{
</p>
<p>public int compare(Student s1, Student s2){
</p>
<p>if (s1.getGpa() &lt; s2.getGpa()) { return 1; }
</p>
<p>else if (s1.getGpa() &gt; s2.getGpa()) { return -1; }
</p>
<p>else { return 0; } 
</p>
<p>}
</p>
<p>}
Here the compare logic is 
</p>
<p>reversed and results in 
descending order.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The example in the slide shows how the two Comparator objects are used with a collection. 
Note: Some code has been commented out to save space. 
Notice how the Comparator objects are initialized on lines 4 and 5. After the sortName and 
sortGpa variables are created, they can be passed to the sort() method by name. Running the 
program produces the following output.
Name: George Washington  ID: 3333  GPA:3.4
</p>
<p>Name: John Adams  ID: 2222  GPA:3.9
</p>
<p>Name: Thomas Jefferson  ID: 1111  GPA:3.8
</p>
<p>Name: John Adams  ID: 2222  GPA:3.9
</p>
<p>Name: Thomas Jefferson  ID: 1111  GPA:3.8
</p>
<p>Name: George Washington  ID: 3333  GPA:3.4
</p>
<p>Notes:
• The Collections utility class provides a number of useful methods for various collections. 
</p>
<p>Methods include min(), max(), copy(), and sort(). 
• The Student class has overridden the toString() method.
</p>
<p>Java SE 7 Programming   7 - 31
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Comparator Test: Example
</p>
<p>1 public class TestComparator {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 List&lt;Student&gt; studentList = new ArrayList&lt;&gt;(3);
</p>
<p>4 Comparator&lt;Student&gt; sortName = new StudentSortName();
</p>
<p>5 Comparator&lt;Student&gt; sortGpa = new StudentSortGpa();
</p>
<p>6
</p>
<p>7 // Initialize list here        
</p>
<p>8
</p>
<p>9 Collections.sort(studentList, sortName);       
</p>
<p>10 for(Student student:studentList){
</p>
<p>11 System.out.println(student);
</p>
<p>12 }
</p>
<p>13
</p>
<p>14 Collections.sort(studentList, sortGpa);       
</p>
<p>15 for(Student student:studentList){
</p>
<p>16 System.out.println(student);
</p>
<p>17 }
</p>
<p>18 }
</p>
<p>19 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 32
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which interface would you use to create multiple sort options 
for a collection?
a. Comparable
</p>
<p>b. Comparison
</p>
<p>c. Comparator
</p>
<p>d. Comparinator
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 33
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Create a custom generic class
• Use the type inference diamond to create an object
• Create a collection without using generics
• Create a collection by using generics
• Implement an ArrayList
• Implement a Set
• Implement a HashMap
• Implement a stack by using a deque
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 34
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 7-1 Overview: 
Counting Part Numbers by Using a HashMap
</p>
<p>This practice covers the following topics:
• Creating a map to store a part number and count
• Creating a map to store a part number and description
• Processing the list of parts and producing a report
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 35
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 7-2 Overview: 
Matching Parentheses by Using a Deque
</p>
<p>This practice covers processing programming statements to 
ensure that the number of parentheses matches.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   7 - 36
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 7-3 Overview: 
Counting Inventory and Sorting with Comparators
</p>
<p>This practice covers processing inventory transactions that 
generate two reports sorted differently using Comparators.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>String Processing
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 2
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Objectives
</p>
<p>After completing this lesson, you should be able to:
• Read data from the command line
• Search strings
• Parse strings
• Create strings by using a StringBuilder
• Search strings by using regular expressions
• Parse strings by using regular expressions
• Replace strings by using regular expressions
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>When a Java program is launched from a terminal window, you can provide the program with zero 
or more command-line arguments.
These command-line arguments enable the user to specify the configuration information for the 
application. These arguments are strings: either stand-alone tokens (such as arg1) or quoted 
strings (such as "another arg").
</p>
<p>Java SE 7 Programming   8 - 3
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Command-Line Arguments
</p>
<p>• Any Java technology application can use command-line 
arguments.
</p>
<p>• These string arguments are placed on the command line to 
launch the Java interpreter after the class name:
java TestArgs arg1 arg2 "another arg"
</p>
<p>• Each command-line argument is placed in the args array 
that is passed to the static main method:
public static void main(String[] args)
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Command-line arguments are always passed to the main method as strings, regardless of their 
intended type. If an application requires command-line arguments other than type String (for 
example, numeric values), the application should convert the string arguments to their respective 
types using the wrapper classes, such as the Integer.parseIntmethod, which can be used to 
convert the string argument that represents the numeric integer to type int.
</p>
<p>Java SE 7 Programming   8 - 4
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Command-Line Arguments
</p>
<p>public class TestArgs {
</p>
<p>public static void main(String[] args) {
</p>
<p>for ( int i = 0; i &lt; args.length; i++ ) {
</p>
<p>System.out.println("args[" + i + "] is '" + 
</p>
<p>args[i] + "'");
</p>
<p>}
</p>
<p>}
</p>
<p>}
</p>
<p>Example execution:
java TestArgs "Ted Baxter" 45 100.25
</p>
<p>args[0] is 'Ted Baxter'
</p>
<p>args[1] is '45'
</p>
<p>args[2] is '100.25'
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The benefit of a properties file is the ability to set values for your application externally. The 
properties file is typically read at the start of the application and is used for default values. But the 
properties file can also be an integral part of a localization scheme, where you store the values of 
menu labels and text for various languages that your application may support.
The convention for a properties file is &lt;filename&gt;.properties, but the file can have any 
extension you want. The file can be located anywhere that the application can find it.
</p>
<p>Java SE 7 Programming   8 - 5
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Properties
</p>
<p>• The java.util.Properties class is used to load and 
save key-value pairs in Java.
</p>
<p>• Can be stored in a simple text file:
hostName = www.example.com
</p>
<p>userName = user
</p>
<p>password = pass
</p>
<p>• File name ends in .properties.
• File can be anywhere that compiler can find it.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>In the code fragment, you create a Properties object. Then, using a try statement, you open a 
file relative to the source files in your NetBeans project. When it is loaded, the name-value pairs 
are available for use in your application.
Properties files enable you to easily inject configuration information or other application data into 
the application.
</p>
<p>Java SE 7 Programming   8 - 6
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Loading and Using a Properties File 
</p>
<p>1 public static void main(String[] args) {
</p>
<p>2 Properties myProps = new Properties();
</p>
<p>3 try {
</p>
<p>4 FileInputStream fis = new FileInputStream("ServerInfo.properties");
</p>
<p>5 myProps.load(fis);
</p>
<p>6 } catch (IOException e) {
</p>
<p>7 System.out.println("Error: " + e.getMessage());
</p>
<p>8 }
</p>
<p>9
</p>
<p>10 // Print Values
</p>
<p>11 System.out.println("Server: " + myProps.getProperty("hostName"));
</p>
<p>12 System.out.println("User: " + myProps.getProperty("userName"));
</p>
<p>13 System.out.println("Password: " + myProps.getProperty("password"));
</p>
<p>14 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Property information can also be passed on the command line. The advantage to passing 
properties from the command line is simplicity. You do not have to open a file and read from it. 
However, if you have more than a few parameters, a properties file is preferable.
</p>
<p>Java SE 7 Programming   8 - 7
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Loading Properties from the Command Line
</p>
<p>• Property information can also be passed on the command 
line.
</p>
<p>• Use the –D option to pass key-value pairs:
java –Dpropertyname=value –Dpropertyname=value myApp
</p>
<p>• For example,  pass one of the previous values:
java –Dusername=user myApp
</p>
<p>• Get the Properties data from the System object:
String userName = System.getProperty("username");
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The PrintStream class converts characters into bytes using the platform's default character 
encoding. 
Unlike the PrintStream class, if automatic flushing is enabled it will be done only when one of 
the println, printf, or format methods is invoked, rather than whenever a newline character 
is included in the output.
The example in the slide shows how to create the object using the autoFlush option. The true
option is required to force PrintWriter to flush each line printed to the console.
</p>
<p>Java SE 7 Programming   8 - 8
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>PrintWriter and the Console
</p>
<p>The PrintWriter class writes characters instead of bytes. 
The class implements all of the print methods found in 
PrintStream.
</p>
<p>import java.io.PrintWriter;
</p>
<p>public class PrintWriterExample {
</p>
<p>public static void main(String[] args){
</p>
<p>PrintWriter pw = new PrintWriter(System.out, true);
</p>
<p>pw.println("This is some output.");
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>You can perform the printf format using both the String class and any output stream. The slide 
shows several string formatting examples. See the Java API documentation for details about all 
the options.
</p>
<p>• %s: String
• %d: Decimal
• %f: Float 
</p>
<p>The program output is the following: 
We have 002 Blue Polo shirts that cost $24.99.
</p>
<p>We have 002 Blue Polo shirts that cost $24.99.
</p>
<p>We have 002 Blue Polo shirts that cost $24.99.
</p>
<p>We have 002 Blue Polo shirts that cost $24.99.
</p>
<p>Java SE 7 Programming   8 - 9
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>printf format
</p>
<p>Java provides many ways to format strings:
• printf and String.format
</p>
<p>public class PrintfExample {
</p>
<p>public static void main(String[] args){
</p>
<p>PrintWriter pw = new PrintWriter(System.out, true);        
</p>
<p>double price = 24.99; int quantity = 2; String color = "Blue";
</p>
<p>System.out.printf("We have %03d %s Polo shirts that cost 
$%3.2f.\n", quantity, color, price);
</p>
<p>System.out.format("We have %03d %s Polo shirts that cost 
$%3.2f.\n", quantity, color, price);
</p>
<p>String out = String.format("We have %03d %s Polo shirts that cost 
$%3.2f.", quantity, color, price);
</p>
<p>System.out.println(out);
</p>
<p>pw.printf("We have %03d %s Polo shirts that cost $%3.2f.\n", 
quantity, color, price);
</p>
<p>}    
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 10
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which two of the following are valid formatted print statements?
a. System.out.printf("%s Polo shirts cost 
</p>
<p>$%3.2f.\n", "Red", "35.00");
</p>
<p>b. System.out.format("%s Polo shirts cost 
$%3.2f.\n", "Red", "35.00");
</p>
<p>c. System.out.println("Red Polo shirts cost 
$35.00.\n");
</p>
<p>d. System.out.print("Red Polo shirts cost 
$35.00.\n");
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The first part of this section covers string functions that are not regular expressions. When you 
perform simple string manipulations, there are a number of very useful built-in methods.
</p>
<p>Java SE 7 Programming   8 - 11
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>String Processing
</p>
<p>• StringBuilder for constructing string
• Built-in string methods
</p>
<p>– Searching
– Parsing
– Extracting substring
</p>
<p>• Parsing with StringTokenizer
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The StringBuilder and StringBuffer classes are the preferred way to concatenate strings.
</p>
<p>Java SE 7 Programming   8 - 12
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>StringBuilder and StringBuffer
</p>
<p>• StringBuilder and StringBuffer are the preferred 
tools when string concatenation is nontrivial.
– More efficient than “+”
</p>
<p>• Concurrency
– StringBuilder (not thread-safe)
– StringBuffer (thread-safe)
</p>
<p>• Set capacity to the size you actually need.
– Constant buffer resizing can also lead to performance 
</p>
<p>problems.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 13
</p>
<p>The example in the slide shows some common StringBuildermethods. You can use 
StringBuilder to insert text in position. Chaining append calls together is a best practice for 
building strings.
The output from the program is as follows:
It was a dark and stormy night, the lightning flashed and the thunder 
rumbled.
</p>
<p>The lightning struck...
</p>
<p>[  1  2  3  4  5  6  7  8  9  10 ] times
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>StringBuilder: Example
</p>
<p>public class StringBuilding {
</p>
<p>public static void main(String[] args){
</p>
<p>StringBuilder sb = new StringBuilder(500);
</p>
<p>sb.append(", the lightning flashed and the thunder 
rumbled.\n");
</p>
<p>sb.insert(0, "It was a dark and stormy night");
</p>
<p>sb.append("The lightning struck...\n").append("[  ");
</p>
<p>for(int i = 1; i &lt; 11; i++){
</p>
<p>sb.append(i).append("  ");
</p>
<p>}
</p>
<p>sb.append("] times");
</p>
<p>System.out.println(sb.toString());
</p>
<p>}    
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The code in the slide demonstrates some of the more useful string methods of the String class.
• equals(): Tests the equality of the contents of two strings. This is preferable to ==, which 
</p>
<p>tests whether two objects point to the same reference.
• contains(): Searches a string to see if it contains the string provided
• replace(): Searches for the string provided and replaces all instances with the target 
</p>
<p>string provided. There is a replaceFirst()method for replacing only the first instance.
• substring(): Returns a string based on its position in the string
</p>
<p>Running the programs in the slide returns the following output:
It was found
</p>
<p>It zwas the zworst of times
</p>
<p>s the w
</p>
<p>Java SE 7 Programming   8 - 14
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Sample String Methods
</p>
<p>1 public class StringMethodsExample {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 PrintWriter pw = new PrintWriter(System.out, true);       
</p>
<p>4 String tc01 = "It was the best of times";
</p>
<p>5 String tc02 = "It was the worst of times";
</p>
<p>6
</p>
<p>7 if (tc01.equals(tc02)){ 
</p>
<p>8 pw.println("Strings match..."); } 
</p>
<p>9 if (tc01.contains("It was")){ 
</p>
<p>10 pw.println("It was found"); }
</p>
<p>11 String temp = tc02.replace("w", "zw");
</p>
<p>12 pw.println(temp);
</p>
<p>13 pw.println(tc02.substring(5, 12));
</p>
<p>14 }
</p>
<p>15 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The simplest way to parse a string is using the split() method. Call the method with the 
character (or characters) that will split the string apart. The result is captured in an array.
Note: The delimiter can be defined using regular expressions.
The output of the program in the slide is as follows:
Blue Shirt
</p>
<p>Red Shirt
</p>
<p>Black Shirt
</p>
<p>Maroon Shirt
</p>
<p>Java SE 7 Programming   8 - 15
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using the split() Method
</p>
<p>1 public class StringSplit {
</p>
<p>2 public static void main(String[] args){
</p>
<p>3 String shirts = "Blue Shirt, Red Shirt, Black 
Shirt, Maroon Shirt";
</p>
<p>4
</p>
<p>5 String[] results = shirts.split(", ");
</p>
<p>6 for(String shirtStr:results){
</p>
<p>7 System.out.println(shirtStr);
</p>
<p>8 }
</p>
<p>9 }
</p>
<p>10 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The StringTokenizer class does the same thing as split() but takes a different approach. 
You must iterate the tokens to get access to them. Also note that the delimiter ", " in this case 
means using both commas and spaces as delimiters. Thus, the result from parsing is the 
following:
Blue
</p>
<p>Shirt
</p>
<p>Red
</p>
<p>Shirt
</p>
<p>Black
</p>
<p>Shirt
</p>
<p>Maroon
</p>
<p>Shirt
</p>
<p>Java SE 7 Programming   8 - 16
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Parsing with StringTokenizer
</p>
<p>1 package com.example.strings;
</p>
<p>2 
</p>
<p>3 import java.util.StringTokenizer;
</p>
<p>4 
</p>
<p>5 public class StringTokenizerExample {
</p>
<p>6     public static void main(String[] args){
</p>
<p>7         String shirts = "Blue Shirt, Red Shirt, Black Shirt, Maroon 
Shirt";
</p>
<p>8         
</p>
<p>9         StringTokenizer st = new StringTokenizer(shirts, ", ");
</p>
<p>10         
</p>
<p>11         while(st.hasMoreTokens()){
</p>
<p>12             System.out.println(st.nextToken());
</p>
<p>13         }
</p>
<p>14     }
</p>
<p>15 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A Scanner can be used to tokenize an input stream or a string. In addition, a Scanner can be 
used to tokenize numbers and convert them into any primitive number type. Note how the 
Scanner is defined on line 13. The resulting object can be iterated over based on a specific type. 
In this case, a float is used.
The output from this code segment is as follows:
Values found: 1.1 2.2 3.3 
</p>
<p>FSum: 6.6000004
</p>
<p>Java SE 7 Programming   8 - 17
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Scanner
</p>
<p>A Scanner can tokenize a string or a stream.
7     public static void main(String[] args) {
</p>
<p>8         Scanner s = null;
</p>
<p>9         StringBuilder sb = new StringBuilder(64);
</p>
<p>10         String line01 = "1.1, 2.2, 3.3";
</p>
<p>11         float fsum = 0.0f;
</p>
<p>12 
</p>
<p>13         s = new Scanner(line01).useDelimiter(", ");
</p>
<p>14         try {
</p>
<p>15             while (s.hasNextFloat()) {
</p>
<p>16                 float f = s.nextFloat();
</p>
<p>17                 fsum += f;
</p>
<p>18                 sb.append(f).append(" ");
</p>
<p>19             }
</p>
<p>20             System.out.println("Values found: " + sb);
</p>
<p>21             System.out.println("FSum: " + fsum);
</p>
<p>22         } catch (Exception e) {
</p>
<p>23             System.out.println(e.getMessage());
</p>
<p>24         }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 18
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Regular Expressions
</p>
<p>• A  language for matching strings of text
– Very detailed vocabulary
– Search, extract, or search and replace
</p>
<p>• With Java, the backslash (\) is not fun.
• Java objects
</p>
<p>– Pattern
– Matcher
– PatternSyntaxException
– java.util.regex
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The Pattern and Matcher objects work together to provide a complete solution. 
The Pattern object defines the regular expression that will be used for the search. As shown in 
the example, a regular expression can be as simple as a word or phrase. 
The Matcher object is then used to select the target string to be searched. A number of methods 
are available for matcher. They are covered in the following slides.
When run, the example produces the following output:
Found match!
</p>
<p>Java SE 7 Programming   8 - 19
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Pattern and Matcher
</p>
<p>• Pattern: Defines a regular expression
• Matcher: Specifies a string to search
</p>
<p>1 import java.util.regex.Matcher;
</p>
<p>2 import java.util.regex.Pattern;
</p>
<p>3
</p>
<p>4 public class PatternExample {
</p>
<p>5 public static void main(String[] args){
</p>
<p>6 String t = "It was the best of times";
</p>
<p>7
</p>
<p>8 Pattern pattern = Pattern.compile("the");
</p>
<p>9 Matcher matcher = pattern.matcher(t);
</p>
<p>10
</p>
<p>11 if (matcher.find()) { System.out.println("Found match!"); }
</p>
<p>12 }
</p>
<p>13 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Character classes enable you to match one character in a number of ways.
</p>
<p>Java SE 7 Programming   8 - 20
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Character Classes
</p>
<p>Character Description
</p>
<p>. Matches any single character (letter, digit, or special character), except 
end-of-line markers
</p>
<p>[abc] Would match any “a,” “b,” or “c” in that position
</p>
<p>[^abc] Would match any character that is not “a,” “b,” or “c” in that position
</p>
<p>[a-c] A range of characters (in this case, “a,” “b,” and “c”)
</p>
<p>| Alternation; essentially an “or” indicator
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The code for this example can be found in the StringExamples project in the 
CustomCharClassExamples.java file.
</p>
<p>Java SE 7 Programming   8 - 21
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Character Class: Examples
</p>
<p>Target String It was the best of times
</p>
<p>Pattern Description Text Matched
</p>
<p>w.s Any sequence that starts with a 
“w” followed by any character 
followed by “s”.
</p>
<p>It was the best of 
times
</p>
<p>w[abc]s Any sequence that starts with a 
“w” followed by “a”, “b”, or “c” and 
then “s”.
</p>
<p>It was the best of 
times
</p>
<p>t[^aeo]mes Any sequence that starts with a 
“t” followed any character that is 
not “a”, “e”, or “o” followed by 
“mes”.
</p>
<p>It was the best of 
times
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The example in the slide shows two ways to find “was” and a way to find “times”. 
To make this happen in Java:
</p>
<p>1. Create  a Pattern object to store the regular expression that you want to search with.
2. Create a Matcher object by passing the text to be searched to your Pattern object and 
</p>
<p>returning a Matcher.
3. Call Matcher.find() to search the text with the Pattern you defined.
4. Call Matcher.group() to display the characters that match your pattern.
</p>
<p>Java SE 7 Programming   8 - 22
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Character Class Code: Examples
</p>
<p>1 public class CustomCharClassExamples {
</p>
<p>2 public static void main(String[] args) {
</p>
<p>3 String t = "It was the best of times";
</p>
<p>4
</p>
<p>5 Pattern p1 = Pattern.compile("w.s");
</p>
<p>6 Matcher m1 = p1.matcher(t);
</p>
<p>7 if (m1.find()) { System.out.println("Found: " + m1.group());
</p>
<p>8 }
</p>
<p>9
</p>
<p>10 Pattern p2 = Pattern.compile("w[abc]s");
</p>
<p>11 Matcher m2 = p2.matcher(t);
</p>
<p>12 if (m2.find()) { System.out.println("Found: " + m2.group());
</p>
<p>13 }
</p>
<p>14
</p>
<p>15 Pattern p3 = Pattern.compile("t[^eou]mes");
</p>
<p>16 Matcher m3 = p3.matcher(t);
</p>
<p>17 if (m3.find()) { System.out.println("Found: " + m3.group());
</p>
<p>18 }
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A number of character classes are used repeatedly. These classes are turned into predefined 
character classes. Classes exist to identify digits, word characters, and white space.
White-Space Characters
\t: Tab character
\n: New-line character
\r: Carriage return
\f: Form feed
\x0B: Vertical tab
</p>
<p>Java SE 7 Programming   8 - 23
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Predefined Character Classes
</p>
<p>Predefined 
Character
</p>
<p>Character Class Negated 
Character
</p>
<p>Negated Class
</p>
<p>\d (digit) [0-9] \D [^0-9]
</p>
<p>\w (word char) [a-zA-Z0-9_] \W [^a-zA-Z0-9_]
</p>
<p>\s (white space) [ \r\t\n\f\x0B] \S [^ \r\t\n\f\x0B]
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>** If there are additional matches in the current line, additional calls to find() will return the next 
match on that line. 
Example:
Pattern p1 = Pattern.compile("\\d\\d");
</p>
<p>Matcher m1 = p1.matcher(t);
</p>
<p>while (m1.find()){
</p>
<p>System.out.println("Found: " + m1.group());
</p>
<p>}
</p>
<p>Produces:
Found: 20
</p>
<p>Found: 15
</p>
<p>The code for this example can be found in the StringExamples project in the 
PredefinedCharClassExample.java file.
</p>
<p>Java SE 7 Programming   8 - 24
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Predefined Character Class: Examples
</p>
<p>Target String Jo told me 20 ways to San Jose in 15 minutes.
</p>
<p>Pattern Description Text Matched
</p>
<p>\\d\\d Find any two digits.** Jo told me 20 ways 
to San Jose in 15
minutes.
</p>
<p>\\sin\\s Find “in” surrounded by two 
spaces.
</p>
<p>Jo told me 20 ways 
to San Jose in 15 
minutes.
</p>
<p>\\Sin\\S Find “in” surrounded by two 
non-space.
</p>
<p>Jo told me 20 ways 
to San Jose in 15 
minutes.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Quantifiers enable you to easily select a range of characters in your queries.
</p>
<p>Java SE 7 Programming   8 - 25
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quantifiers
</p>
<p>Quantifier Description
</p>
<p>* The previous character is repeated zero or more times.
</p>
<p>+ The previous character is repeated one or more times.
</p>
<p>? The previous character must appear once or not at all.
</p>
<p>{n} The previous character appears exactly n times.
</p>
<p>{m,n} The previous character appears from m to n times.
</p>
<p>{m,} The previous character appears m or more times.
</p>
<p>(xx){n} This group of characters repeats n times.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 26
</p>
<p>The code for this example can be found in the StringExamples project in the 
QuantifierExample.java file.
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quantifier: Examples
</p>
<p>Target String Longlonglong ago, in a galaxy far far away
</p>
<p>Pattern Description Text Matched
</p>
<p>ago.* Find “ago” and then 0 or all the 
characters remaining on the line.
</p>
<p>Longlonglong ago, in 
a galaxy far far away
</p>
<p>gal.{3} Match “gal” plus the next three 
characters. This replaces “…” as 
used in a previous example.
</p>
<p>Longlonglong ago, in 
a galaxy far far away
</p>
<p>(long){2} Find “long” repeated twice. Longlonglong ago, in 
a galaxy far far away
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>A regular expression always tries to match the characters that return the most characters. This is 
known as the “greediness principle.” Use the ? operator to limit the result to the fewest characters 
needed to match the pattern.
The code for this example can be found in the StringExamples project in the 
GreedinessExample.java file.
</p>
<p>Java SE 7 Programming   8 - 27
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Greediness
</p>
<p>• A regular expression always tries to grab as many 
characters as possible.
</p>
<p>• Use the ? operator to limit the search to the shortest 
possible match.
</p>
<p>Target String Longlonglong ago, in a galaxy far far away.
</p>
<p>Pattern Description Text Matched
</p>
<p>ago.*far A regular expression always 
grabs the most characters 
possible.
</p>
<p>Longlonglong ago, in 
a galaxy far far away.
</p>
<p>ago.*?far The “?” character essentially
turns off greediness.
</p>
<p>Longlonglong ago, in 
a galaxy far far away.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 28
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which symbol means that the character is repeated one or 
more times?
a. *
</p>
<p>b. +
</p>
<p>c. .
</p>
<p>d. ?
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Boundary characters can be used to match different parts of a line.
</p>
<p>Java SE 7 Programming   8 - 29
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Boundary Matchers
</p>
<p>Anchor Description
</p>
<p>^ Matches the beginning of a line
</p>
<p>$ Matches the end of a line
</p>
<p>\b Matches the start or the end of a word
</p>
<p>\B Does not match the start or end of a word
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>The code for this example can be found in the StringExamples project in the 
BoundaryCharExample.java file.
</p>
<p>Java SE 7 Programming   8 - 30
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Boundary: Examples
</p>
<p>Target String it was the best of times or it was the worst of times
</p>
<p>Pattern Description Text Matched
</p>
<p>^it.*?times The sequence that starts a line 
with “it” followed by some 
characters and “times”, with 
greediness off
</p>
<p>it was the best of 
times or it was the 
worst of times
</p>
<p>\\sit.*times$ The sequence that starts with “it” 
followed by some characters and 
ends the line with “times”
</p>
<p>it was the best of 
times or it was the 
worst of times
</p>
<p>\\bor\\b.{3} Find “or” surrounded by word 
boundaries, plus the next three 
characters.
</p>
<p>it was the best of 
times or it was the 
worst of times
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 31
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Quiz
</p>
<p>Which symbol matches the end of a line?
a. *
</p>
<p>b. +
</p>
<p>c. $
</p>
<p>d. ^
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>With regular expressions, you can use parentheses to identify parts of a string to match. This 
example matches the component parts of an email address. Notice how each pair of parentheses 
is numbered. In a regular expression, group(0) or group() matches all the text matched when 
groups are used. Here is the source code for the example:
public class MatchingExample { 
</p>
<p>public static void main(String[] args){
</p>
<p>String email = "george.washington@example.com";
</p>
<p>Pattern p1 = Pattern.compile("(\\S+?)\\.(\\S+?)@(\\S+)");
</p>
<p>Matcher m1 = p1.matcher(email);
</p>
<p>if (m1.find()){
</p>
<p>System.out.println("First: " + m1.group(1));
</p>
<p>System.out.println("Last: " + m1.group(2)); 
</p>
<p>System.out.println("Domain: " + m1.group(3)); 
</p>
<p>System.out.println("Everything Matched: " + m1.group(0));
</p>
<p>}
</p>
<p>}
</p>
<p>} Java SE 7 Programming   8 - 32
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Matching and Groups
</p>
<p>Target String george.washington@example.com
</p>
<p>Match 3 Parts (george).(washington)@(example.com)
</p>
<p>Group Numbers ( 1 ).( 2 )@( 3 )
</p>
<p>Pattern (\\S+?)\\.(\\S+?)@(\\S+)
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>You can do a search-and-replace by using the replaceAll method after performing a find.
The output from the program is as follows:
&lt;p&gt;This is an H1&lt;/p&gt;
</p>
<p>Java SE 7 Programming   8 - 33
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Using the replaceAll Method
</p>
<p>Using the replaceAll method, you can search and replace.
</p>
<p>public class ReplacingExample {
</p>
<p>public static void main(String[] args){
</p>
<p>String header = "&lt;h1&gt;This is an H1&lt;/h1&gt;";
</p>
<p>Pattern p1 = Pattern.compile("h1");
</p>
<p>Matcher m1 = p1.matcher(header);
</p>
<p>if (m1.find()){
</p>
<p>header = m1.replaceAll("p");
</p>
<p>System.out.println(header);
</p>
<p>}
</p>
<p>}
</p>
<p>}
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 34
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Summary
</p>
<p>In this lesson, you should have learned how to:
• Read data from the command line
• Search strings
• Parse strings
• Create strings by using a StringBuilder
• Search strings by using regular expressions
• Parse strings by using regular expressions
• Replace strings by using regular expressions
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 35
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 8-1 Overview: 
Parsing Text with split()
</p>
<p>This practice covers using the String.split() method to 
parse text.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 36
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 8-2 Overview: 
Creating a Regular Expression Search Program
</p>
<p>This practice covers creating a program that searches through 
a text file using a regular expression.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>Java SE 7 Programming   8 - 37
</p>
<p>Copyright © 2014, Oracle and/or its affiliates. All rights reserved.
</p>
<p>Practice 8-3 Overview: 
Transforming HTML by Using 
</p>
<p>Regular Expressions
This practice covers transforming the HTML of a file by using 
several regular expressions.
</p>
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<div class="page"><p />
<p>O
ra
</p>
<p>cl
e 
</p>
<p>U
ni
</p>
<p>ve
rs
</p>
<p>ity
 a
</p>
<p>nd
 S
</p>
<p>ib
in
</p>
<p>fo
ce
</p>
<p>nt
er
</p>
<p> u
se
</p>
<p> o
nl
</p>
<p>y
</p>
<p>TH
ES
</p>
<p>E 
eK
</p>
<p>IT
 M
</p>
<p>AT
ER
</p>
<p>IA
LS
</p>
<p> A
R
</p>
<p>E 
FO
</p>
<p>R
 Y
</p>
<p>O
U
</p>
<p>R
 U
</p>
<p>SE
 IN
</p>
<p> T
H
</p>
<p>IS
 C
</p>
<p>LA
SS
</p>
<p>R
O
</p>
<p>O
M
</p>
<p> O
N
</p>
<p>LY
.  
</p>
<p>C
O
</p>
<p>PY
IN
</p>
<p>G
 e
</p>
<p>KI
T 
</p>
<p>M
AT
</p>
<p>ER
IA
</p>
<p>LS
 F
</p>
<p>R
O
</p>
<p>M
 T
</p>
<p>H
IS
</p>
<p> C
O
</p>
<p>M
PU
</p>
<p>TE
R
</p>
<p> IS
 S
</p>
<p>TR
IC
</p>
<p>TL
Y 
</p>
<p>PR
O
</p>
<p>H
IB
</p>
<p>IT
ED</p>
<p />
</div>
<ul>	<li>Java SE 7 Programming - Student Guide - Volume I </li>
	<li>Table of Contents</li>
	<li>Lesson 1: Introduction</li>
<ul>	<li>Course Goals</li>
	<li>Course Objectives</li>
	<li>Audience</li>
	<li>Prerequisites</li>
	<li>Class Introductions</li>
	<li>Course Environment</li>
	<li>Java Programs Are Platform-Independent</li>
	<li>Java Technology Product Groups</li>
	<li>Java SE Platform Versions</li>
	<li>Downloading and Installing the JDK</li>
	<li>Java in Server Environments</li>
	<li>The Java Community</li>
	<li>The Java Community Process (JCP)</li>
	<li>OpenJDK</li>
	<li>Oracle Java SE Support</li>
	<li>Additional Resources</li>
	<li>Summary</li>
</ul>
	<li>Lesson 2: Java Syntax and Class Review</li>
<ul>	<li>Objectives</li>
	<li>Java Language Review</li>
	<li>Class Structure</li>
	<li>A Simple Class</li>
	<li>Code Blocks</li>
	<li>Primitive Data Types</li>
	<li>Java SE 7 Numeric Literals</li>
	<li>Java SE 7 Binary Literals</li>
	<li>Operators</li>
	<li>Strings</li>
	<li>String Operations</li>
	<li>if else</li>
	<li>Logical Operators</li>
	<li>Arrays and for-each Loop</li>
	<li>for Loop</li>
	<li>while Loop</li>
	<li>String switch Statement</li>
	<li>Java Naming Conventions</li>
	<li>A Simple Java Class: Employee</li>
	<li>Methods</li>
	<li>Creating an Instance of an Object</li>
	<li>Constructors</li>
	<li>package Statement</li>
	<li>import Statements</li>
	<li>More on import</li>
	<li>Java Is Pass-By-Value</li>
	<li>Pass-By-Value for Object References</li>
	<li>Objects Passed as Parameters</li>
	<li>How to Compile and Run</li>
	<li>Compiling and Running: Example</li>
	<li>Java Class Loader</li>
	<li>Garbage Collection</li>
	<li>Summary</li>
	<li>Quiz</li>
	<li>Practice 2-1 Overview: Creating Java Classes</li>
</ul>
	<li>Lesson 3: Encapsulation and Subclassing</li>
<ul>	<li>Objectives</li>
	<li>Encapsulation</li>
	<li>Encapsulation: Example</li>
	<li>Encapsulation: Private Data</li>
	<li>Public and Private Access Modifiers</li>
	<li>Revisiting Employee</li>
	<li>Method Naming: Best Practices</li>
	<li>Employee Class Refined</li>
	<li>Make Classes as Immutable as Possible</li>
	<li>Creating Subclasses</li>
	<li>Subclassing</li>
	<li>Manager Subclass</li>
	<li>Constructors Are Not Inherited</li>
	<li>Using super in Constructors</li>
	<li>Constructing a Manager Object</li>
	<li>What Is Polymorphism?</li>
	<li>Overloading Methods</li>
	<li>Methods Using Variable Arguments</li>
	<li>Single Inheritance</li>
	<li>Summary</li>
	<li>Quiz</li>
	<li>Practice 3-1 Overview: Creating Subclasses</li>
	<li>(Optional) Practice 3-2 Overview: Adding a Staff to a Manager</li>
</ul>
	<li>Lesson 4: Java Class Design</li>
<ul>	<li>Objectives</li>
	<li>Using Access Control</li>
	<li>Protected Access Control: Example</li>
	<li>Field Shadowing: Example</li>
	<li>Access Control: Good Practice</li>
	<li>Overriding Methods</li>
	<li>Invoking an Overridden Method</li>
	<li>Virtual Method Invocation</li>
	<li>Accessibility of Overridden Methods</li>
	<li>Applying Polymorphism</li>
	<li>Using the instanceof Keyword</li>
	<li>Casting Object References</li>
	<li>Casting Rules</li>
	<li>Overriding Object methods</li>
	<li>Object toString Method</li>
	<li>Object equals Method</li>
	<li>Overriding equals in Employee</li>
	<li>Overriding Object hashCode</li>
	<li>Summary</li>
	<li>Quiz</li>
	<li>Practice 4-1 Overview: Overriding Methods and Applying Polymorphism</li>
</ul>
	<li>Lesson 5: Advanced Class Design</li>
<ul>	<li>Objectives</li>
	<li>Modeling Business Problems with Classes</li>
	<li>Enabling Generalization</li>
	<li>Identifying the Need for Abstract Classes</li>
	<li>Defining Abstract Classes</li>
	<li>Defining Abstract Methods</li>
	<li>Validating Abstract Classes</li>
	<li>Quiz</li>
	<li>static Keyword</li>
	<li>Static Methods</li>
	<li>Implementing Static Methods</li>
	<li>Calling Static Methods</li>
	<li>Static Variables</li>
	<li>Defining Static Variables</li>
	<li>Using Static Variables</li>
	<li>Static Imports</li>
	<li>Quiz</li>
	<li>Final Methods</li>
	<li>Final Classes</li>
	<li>Final Variables</li>
	<li>Declaring Final Variables</li>
	<li>Quiz</li>
	<li>When to Avoid Constants</li>
	<li>Typesafe Enumerations</li>
	<li>Enum Usage</li>
	<li>Complex Enums</li>
	<li>Quiz</li>
	<li>Design Patterns</li>
	<li>Singleton Pattern</li>
	<li>Nested Classes</li>
	<li>Inner Class: Example</li>
	<li>Anonymous Inner Classes</li>
	<li>Quiz</li>
	<li>Summary</li>
	<li>Practice 5-1 Overview: Applying the Abstract Keyword</li>
	<li>Practice 5-2 Overview: Applying the Singleton Design Pattern</li>
	<li>(Optional) Practice 5-3 Overview: Using Java Enumerations</li>
	<li>(Optional) Practice 5-4 Overview: Recognizing Nested Classes</li>
</ul>
	<li>Lesson 6: Inheritance with Java Interfaces</li>
<ul>	<li>Objectives</li>
	<li>Implementation Substitution</li>
	<li>Java Interfaces</li>
	<li>Developing Java Interfaces</li>
	<li>Constant Fields</li>
	<li>Interface References</li>
	<li>instanceof Operator</li>
	<li>Marker Interfaces</li>
	<li>Casting to Interface Types</li>
	<li>Using Generic Reference Types</li>
	<li>Implementing and Extending</li>
	<li>Extending Interfaces</li>
	<li>Interfaces in Inheritance Hierarchies</li>
	<li>Quiz</li>
	<li>Design Patterns and Interfaces</li>
	<li>DAO Pattern</li>
	<li>Before the DAO Pattern</li>
	<li>After the DAO Pattern</li>
	<li>The Need for the Factory Pattern</li>
	<li>Using the Factory Pattern</li>
	<li>The Factory</li>
	<li>The DAO and Factory Together</li>
	<li>Quiz</li>
	<li>Code Reuse</li>
	<li>Design Difficulties</li>
	<li>Composition</li>
	<li>Composition Implementation</li>
	<li>Polymorphism and Composition</li>
	<li>Quiz</li>
	<li>Summary</li>
	<li>Practice 6-1 Overview: Implementing an Interface</li>
	<li>Practice 6-2 Overview: Applying the DAO Pattern</li>
	<li>(Optional) Practice 6-3 Overview: Implementing Composition</li>
</ul>
	<li>Lesson 7: Generics and Collections</li>
<ul>	<li>Objectives</li>
	<li>Generics</li>
	<li>Simple Cache Class Without Generics</li>
	<li>Generic Cache Class</li>
	<li>Generics in Action</li>
	<li>Generics with Type Inference Diamond</li>
	<li>Quiz</li>
	<li>Collections</li>
	<li>Collection Types</li>
	<li>List Interface</li>
	<li>ArrayList Implementation Class</li>
	<li>ArrayList Without Generics</li>
	<li>Generic ArrayList</li>
	<li>Generic ArrayList: Iteration and Boxing</li>
	<li>Autoboxing and Unboxing</li>
	<li>Quiz</li>
	<li>Set Interface</li>
	<li>Set Interface: Example</li>
	<li>Map Interface</li>
	<li>Map Types</li>
	<li>Map Interface: Example</li>
	<li>Deque Interface</li>
	<li>Stack with Deque: Example</li>
	<li>Ordering Collections</li>
	<li>Comparable Interface</li>
	<li>Comparable: Example</li>
	<li>Comparable Test: Example</li>
	<li>Comparator Interface</li>
	<li>Comparator: Example</li>
	<li>Comparator Test: Example</li>
	<li>Quiz</li>
	<li>Summary</li>
	<li>Practice 7-1 Overview: Counting Part Numbers by Using a HashMap</li>
	<li>Practice 7-2 Overview: Matching Parentheses by Using a Deque</li>
	<li>Practice 7-3 Overview: Counting Inventory and Sorting with Comparators</li>
</ul>
	<li>Lesson 8: String Processing</li>
<ul>	<li>Objectives</li>
	<li>Command-Line Arguments</li>
	<li>Properties</li>
	<li>Loading and Using a Properties File</li>
	<li>Loading Properties from the Command Line</li>
	<li>PrintWriter and the Console</li>
	<li>printf format</li>
	<li>Quiz</li>
	<li>String Processing</li>
	<li>StringBuilder and StringBuffer</li>
	<li>StringBuilder: Example</li>
	<li>Sample String Methods</li>
	<li>Using the split() Method</li>
	<li>Parsing with StringTokenizer</li>
	<li>Scanner</li>
	<li>Regular Expressions</li>
	<li>Pattern and Matcher</li>
	<li>Character Classes</li>
	<li>Character Class: Examples</li>
	<li>Character Class Code: Examples</li>
	<li>Predefined Character Classes</li>
	<li>Predefined Character Class: Examples</li>
	<li>Quantifiers</li>
	<li>Quantifier: Examples</li>
	<li>Greediness</li>
	<li>Quiz</li>
	<li>Boundary Matchers</li>
	<li>Boundary: Examples</li>
	<li>Quiz</li>
	<li>Matching and Groups</li>
	<li>Using the replaceAll Method</li>
	<li>Summary</li>
	<li>Practice 8-1 Overview: Parsing Text with split()</li>
	<li>Practice 8-2 Overview: Creating a Regular Expression Search Program</li>
	<li>Practice 8-3 Overview: Transforming HTML by Using Regular Expressions</li>
</ul>
</ul>
</body></html>
